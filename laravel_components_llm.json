{
    "project": "hrm-laravel-base",
    "timestamp": "2025-09-07T08:04:54+00:00",
    "components": [
        {
            "type": "Model",
            "name": "Membership",
            "file": "./app/Models/Membership.php",
            "content": "<?phpnamespace App\\Models;use Laravel\\Jetstream\\Membership as JetstreamMembership;class Membership extends JetstreamMembership{    /**     * Indicates if the IDs are auto-incrementing.     *     * @var bool     */    public $incrementing = true;}"
        },
        {
            "type": "Model",
            "name": "Team",
            "file": "./app/Models/Team.php",
            "content": "<?phpnamespace App\\Models;use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;use Laravel\\Jetstream\\Events\\TeamCreated;use Laravel\\Jetstream\\Events\\TeamDeleted;use Laravel\\Jetstream\\Events\\TeamUpdated;use Laravel\\Jetstream\\Team as JetstreamTeam;class Team extends JetstreamTeam{    /** @use HasFactory<\\Database\\Factories\\TeamFactory> */    use HasFactory;    /**     * The attributes that are mass assignable.     *     * @var array<int, string>     */    protected $fillable = [        'name',        'personal_team',    ];    /**     * The event map for the model.     *     * @var array<string, class-string>     */    protected $dispatchesEvents = [        'created' => TeamCreated::class,        'updated' => TeamUpdated::class,        'deleted' => TeamDeleted::class,    ];    /**     * Get the attributes that should be cast.     *     * @return array<string, string>     */    protected function casts(): array    {        return [            'personal_team' => 'boolean',        ];    }}"
        },
        {
            "type": "Model",
            "name": "TeamInvitation",
            "file": "./app/Models/TeamInvitation.php",
            "content": "<?phpnamespace App\\Models;use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;use Laravel\\Jetstream\\Jetstream;use Laravel\\Jetstream\\TeamInvitation as JetstreamTeamInvitation;class TeamInvitation extends JetstreamTeamInvitation{    /**     * The attributes that are mass assignable.     *     * @var array<int, string>     */    protected $fillable = [        'email',        'role',    ];    /**     * Get the team that the invitation belongs to.     */    public function team(): BelongsTo    {        return $this->belongsTo(Jetstream::teamModel());    }}"
        },
        {
            "type": "Model",
            "name": "ChartOfAccount",
            "file": "./app/Models/Accounting/ChartOfAccount.php",
            "content": "<?php// app/Models/Accounting/ChartOfAccount.phpnamespace App\\Models\\Accounting;use Database\\Factories\\Accounting\\ChartOfAccountFactory; // <-- Add this importuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;use Illuminate\\Database\\Eloquent\\Model;use Illuminate\\Database\\Eloquent\\Relations\\HasMany;class ChartOfAccount extends Model{    use HasFactory;    protected $fillable = ['code', 'name', 'type', 'description'];    /**     * Create a new factory instance for the model.     */    protected static function newFactory(): ChartOfAccountFactory    {        return ChartOfAccountFactory::new();    }    public function ledgerEntries(): HasMany    {        return $this->hasMany(LedgerEntry::class, 'chart_of_account_id');    }    public function scopeAssets($query)    {        return $query->where('type', 'asset');    }    public function scopeLiabilities($query)    {        return $query->where('type', 'liability');    }    public function scopeEquity($query)    {        return $query->where('type', 'equity');    }    public function scopeRevenues($query)    {        return $query->where('type', 'revenue');    }    public function scopeExpenses($query)    {        return $query->where('type', 'expense');    }    public function getBalanceAttribute()    {        $debits = $this->ledgerEntries->where('type', 'debit')->sum('amount');        $credits = $this->ledgerEntries->where('type', 'credit')->sum('amount');        return in_array($this->type, ['asset', 'expense'])            ? $debits - $credits            : $credits - $debits;    }}"
        },
        {
            "type": "Model",
            "name": "JournalEntry",
            "file": "./app/Models/Accounting/JournalEntry.php",
            "content": "<?php// app/Models/Accounting/JournalEntry.phpnamespace App\\Models\\Accounting;use App\\Exceptions\\UnbalancedTransactionException;use App\\Models\\User;use App\\Services\\AccountingService;use App\\Services\\SequenceService;use Database\\Factories\\Accounting\\JournalEntryFactory;use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;use Illuminate\\Database\\Eloquent\\Model;use Illuminate\\Database\\Eloquent\\Relations\\HasMany;use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;use Illuminate\\Support\\Facades\\DB;class JournalEntry extends Model{    use HasFactory;    protected $fillable = [        'reference_number',        'entry_date',        'description',        'status',        'created_by',        'approved_by',        'posted_at'    ];    protected $attributes = [        'status' => 'draft', // ← Default value    ];    protected $casts = [        'entry_date' => 'date',        'posted_at' => 'datetime',    ];    public static function createWithTransaction(array $attributes = [])    {        return DB::transaction(function () use ($attributes) {            $sequenceService = app(SequenceService::class);            // Reserve a sequence number first            $reservation = $sequenceService->reserve('journal_entry_ref');            try {                $journalEntry = self::create(array_merge($attributes, [                    'reference_number' => $reservation['formatted']                ]));                // Commit the sequence reservation                $sequenceService->commitReservation('journal_entry_ref', $reservation['value']);                return $journalEntry;            } catch (\\Exception $e) {                // The sequence reservation will automatically roll back with the transaction                // No need to manually revert since we never committed it                throw $e;            }        });    }    // Keep the old behavior for non-critical cases    protected static function booted(): void    {        static::creating(function (JournalEntry $journalEntry) {            if (empty($journalEntry->reference_number)) {                $sequenceService = app(SequenceService::class);                $journalEntry->reference_number = $sequenceService->generate('journal_entry_ref');            }        });    }    protected static function newFactory(): JournalEntryFactory    {        return JournalEntryFactory::new();    }    public function createdBy(): BelongsTo    {        return $this->belongsTo(User::class, 'created_by');    }    public function approvedBy(): BelongsTo    {        return $this->belongsTo(User::class, 'approved_by');    }    public function ledgerEntries(): HasMany    {        return $this->hasMany(LedgerEntry::class, 'transactionable_id')            ->where('transactionable_type', self::class);    }    /**     * Post the journal entry to the general ledger     */    public function post(array $entries): void    {        $accountingService = app(AccountingService::class);        $accountingService->postTransaction($entries, $this->description, $this);        $this->update([            'status' => 'posted',            'posted_at' => now(),        ]);    }    /**     * Void a posted journal entry (create reversing entries)     */    public function void(): void    {        if ($this->status !== 'posted') {            throw new \\LogicException('Only posted journal entries can be voided');        }        $reversingEntries = $this->ledgerEntries->map(function ($entry) {            return [                'account' => $entry->account,                'type' => $entry->type === 'debit' ? 'credit' : 'debit',                'amount' => $entry->amount,            ];        })->toArray();        $reversingJournal = JournalEntry::create([            'reference_number' => $this->reference_number . '-VOID',            'entry_date' => now(),            'description' => 'Reversal of: ' . $this->description,            'status' => 'draft',            'created_by' => $this->created_by,        ]);        $reversingJournal->post($reversingEntries);        $this->update(['status' => 'void']);    }}"
        },
        {
            "type": "Model",
            "name": "LedgerEntry",
            "file": "./app/Models/Accounting/LedgerEntry.php",
            "content": "<?php// app/Models/Accounting/LedgerEntry.phpnamespace App\\Models\\Accounting;use App\\Models\\Dimension;use Database\\Factories\\Accounting\\LedgerEntryFactory;use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;use Illuminate\\Database\\Eloquent\\Model;use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;use Illuminate\\Database\\Eloquent\\Relations\\MorphToMany;class LedgerEntry extends Model{    use HasFactory;    protected $fillable = [        'entry_date',        'chart_of_account_id',        'type',        'amount',        'description',        'transactionable_type',        'transactionable_id'    ];    protected $casts = [        'entry_date' => 'date',        'amount' => 'decimal:2',    ];    protected static function newFactory(): LedgerEntryFactory    {        return LedgerEntryFactory::new();    }    public function account(): BelongsTo    {        return $this->belongsTo(ChartOfAccount::class, 'chart_of_account_id');    }    public function transactionable()    {        return $this->morphTo();    }    public function dimensions(): MorphToMany    {        return $this->morphToMany(Dimension::class, 'dimensionable');    }    // REMOVE THE booted() METHOD - we're handling this at database level}"
        },
        {
            "type": "Model",
            "name": "Dimension",
            "file": "./app/Models/Dimension.php",
            "content": "<?php// app/Models/Dimension.phpnamespace App\\Models;use App\\Models\\Accounting\\LedgerEntry; // <-- Add this importuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;use Illuminate\\Database\\Eloquent\\Model;use Illuminate\\Database\\Eloquent\\Relations\\MorphToMany;class Dimension extends Model{    use HasFactory;    protected $fillable = ['name', 'code', 'type', 'description'];    public function ledgerEntries(): MorphToMany    {        return $this->morphedByMany(LedgerEntry::class, 'dimensionable');    }}"
        },
        {
            "type": "Model",
            "name": "TestTransaction",
            "file": "./app/Models/TestTransaction.php",
            "content": "<?php// app/Models/TestTransaction.phpnamespace App\\Models;use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;use Illuminate\\Database\\Eloquent\\Model;class TestTransaction extends Model{    use HasFactory;    protected $fillable = ['amount'];}"
        },
        {
            "type": "Model",
            "name": "Organization",
            "file": "./app/Models/Organization.php",
            "content": "<?phpnamespace App\\Models;use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;use Illuminate\\Database\\Eloquent\\Model;use Illuminate\\Database\\Eloquent\\SoftDeletes;class Organization extends Model{    use HasFactory, SoftDeletes;    /**     * The attributes that are mass assignable.     *     * @var array     */    protected $fillable = ['name', 'description', 'is_active'];    /**     * The attributes that should be mutated to dates.     *     * @var array     */    protected $dates = ['deleted_at'];    /**     * Get the users that belong to the organization.     */    public function users()    {        return $this->belongsToMany(User::class, 'organization_user')            ->withPivot(['roles', 'permissions'])            ->withTimestamps();    }    public function units()    {        return $this->hasMany(OrganizationUnit::class);    }}"
        },
        {
            "type": "Model",
            "name": "OrganizationUnit",
            "file": "./app/Models/OrganizationUnit.php",
            "content": "<?phpnamespace App\\Models;use App\\Models\\Organization;use App\\Models\\User;use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;use Illuminate\\Database\\Eloquent\\Model;use Illuminate\\Database\\Eloquent\\SoftDeletes;class OrganizationUnit extends Model{    use HasFactory, SoftDeletes;    protected $casts = [        'custom_fields' => 'array',    ];    protected $fillable = [        'name',        'type',        'parent_id',        'depth',        'custom_fields',    ];    public function organization()    {        return $this->belongsTo(Organization::class);    }    public function parent()    {        return $this->belongsTo(OrganizationUnit::class, 'parent_id');    }    public function children()    {        return $this->hasMany(OrganizationUnit::class, 'parent_id')            // ->withDepth()            ->withTrashed();    }    public function users()    {        // The 'is_active' pivot column does not exist in your schema.        return $this->belongsToMany(User::class, 'organization_user')            ->withPivot(['position', 'roles', 'permissions']);    }    // Recursive relationship for all descendants    public function allDescendants()    {        return $this->hasMany(OrganizationUnit::class, 'parent_id')            ->with('allDescendants');    }    public function allDescendantsWithSelf()    {        return OrganizationUnit::where(function ($query) {            $query->where('id', $this->id)                ->orWhereIn('id', $this->allDescendants->pluck('id'));        });    }    // Recursive relationship for all ancestors    public function allAncestors()    {        return $this->parent()->with('allAncestors');    }    // public function scopeWithDepth($query)    // {    //     $query->defaultOrder()->withDepthBelow(0);    // }    // public function scopeWithDepthBelow($query, $depth)    // {    //     $query->addSelect(['depth' => $query->query()->newQuery()    //         ->selectRaw('count(parent.id)')    //         ->from('organization_units as parent')    //         ->whereColumn('parent.id', 'organization_units.parent_id')    //         ->whereRaw('parent.parent_id = organization_units.id')])    //         ->where('depth', '>=', $depth);    // }    // public function scopeDefaultOrder($query)    // {    //     $query->orderBy('depth')->orderBy('parent_id')->orderBy('name');    // }}"
        },
        {
            "type": "Model",
            "name": "User",
            "file": "./app/Models/User.php",
            "content": "<?phpnamespace App\\Models;// use Illuminate\\Contracts\\Auth\\MustVerifyEmail;use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;use Illuminate\\Foundation\\Auth\\User as Authenticatable;use Illuminate\\Notifications\\Notifiable;use Laravel\\Fortify\\TwoFactorAuthenticatable;use Laravel\\Jetstream\\HasProfilePhoto;use Laravel\\Jetstream\\HasTeams;use Laravel\\Sanctum\\HasApiTokens;class User extends Authenticatable{    use HasApiTokens;    /** @use HasFactory<\\Database\\Factories\\UserFactory> */    use HasFactory;    use HasProfilePhoto;    use HasTeams;    use Notifiable;    use TwoFactorAuthenticatable;    /**     * The attributes that are mass assignable.     *     * @var array<int, string>     */    protected $fillable = [        'name',        'email',        'password',    ];    /**     * The attributes that should be hidden for serialization.     *     * @var array<int, string>     */    protected $hidden = [        'password',        'remember_token',        'two_factor_recovery_codes',        'two_factor_secret',    ];    /**     * The accessors to append to the model's array form.     *     * @var array<int, string>     */    protected $appends = [        'profile_photo_url',    ];    /**     * Get the attributes that should be cast.     *     * @return array<string, string>     */    protected function casts(): array    {        return [            'email_verified_at' => 'datetime',            'password' => 'hashed',        ];    }    public function organizations()    {        return $this->belongsToMany(Organization::class, 'organization_user')            ->withPivot('organization_unit_id', 'position', 'roles', 'permissions')            ->withTimestamps();    }    // app/Models/User.php    public function units()    {        // This relationship correctly maps to the organization_user pivot table        // by specifying the foreign keys. This seems okay.        return $this->belongsToMany(OrganizationUnit::class, 'organization_user', 'user_id', 'organization_unit_id')            ->withPivot('organization_id', 'position', 'roles', 'permissions')            ->withTimestamps();    }    public function organizationUnits()    {        return $this->units();    }}"
        },
        {
            "type": "Controller",
            "name": "Controller",
            "file": "./app/Http/Controllers/Controller.php",
            "content": "<?phpnamespace App\\Http\\Controllers;abstract class Controller{    //}"
        },
        {
            "type": "Controller",
            "name": "OrganizationController",
            "file": "./app/Http/Controllers/Api/OrganizationController.php",
            "content": "<?phpnamespace App\\Http\\Controllers\\Api;use App\\Http\\Controllers\\Controller;use App\\Models\\Organization;use Illuminate\\Http\\Request;use Illuminate\\Support\\Facades\\Gate;class OrganizationController extends Controller{    public function index()    {        return response()->json([            'data' => Organization::all()        ]);    }    public function store(Request $request)    {        $validated = $request->validate([            'name' => 'required|string|max:255|unique:organizations',            'description' => 'nullable|string'        ]);        $organization = Organization::create($validated);        return response()->json([            'data' => $organization        ], 201);    }    public function show(Organization $organization)    {        return response()->json([            'data' => $organization        ]);    }    public function update(Request $request, Organization $organization)    {        $validated = $request->validate([            'name' => 'sometimes|required|string|max:255|unique:organizations,name,' . $organization->id,            'description' => 'nullable|string'        ]);        $organization->update($validated);        return response()->json([            'data' => $organization        ]);    }    public function destroy(Organization $organization)    {        $organization->delete();        return response()->json(null, 204);    }    // In OrganizationController    public function members(Organization $organization)    {        // $this->authorize('viewMembers', $organization);        // Jetstream-style authorization        if (Gate::denies('viewMembers', $organization)) {            abort(403);        }        $members = $organization->users()            ->withPivot('roles', 'organization_unit_id')            ->get()            ->map(function ($user) {                return [                    'id' => $user->id,                    'name' => $user->name,                    'email' => $user->email,                    'roles' => $user->pivot->roles,                    'unit_id' => $user->pivot->organization_unit_id                ];            });        return response()->json([            'data' => $members        ]);    }}"
        },
        {
            "type": "Controller",
            "name": "OrganizationInvitationController",
            "file": "./app/Http/Controllers/Api/OrganizationInvitationController.php",
            "content": "<?phpnamespace App\\Http\\Controllers\\Api;use App\\Http\\Controllers\\Controller;use App\\Models\\Organization;use App\\Models\\User;use Illuminate\\Http\\Request;use Illuminate\\Support\\Facades\\Gate;use Illuminate\\Validation\\Rule;class OrganizationInvitationController extends Controller{    public function store(Organization $organization, Request $request)    {        // Authorization        if (Gate::denies('inviteMembers', $organization)) {            abort(403, 'You are not authorized to invite members');        }        // Validation        $validated = $request->validate([            'email' => [                'required',                'email',                Rule::exists('users', 'email'),                function ($attribute, $value, $fail) use ($organization) {                    $user = User::where('email', $value)->first();                    if ($user && $organization->users()->where('user_id', $user->id)->exists()) {                        $fail('This user is already a member of the organization');                    }                }            ],            'roles' => ['required', Rule::in(['admin', 'manager', 'member'])]        ]);        // Find user        $user = User::where('email', $validated['email'])->firstOrFail();        // Add to organization with proper JSON encoding        $organization->users()->attach(            $user->id,            [                'roles' => json_encode([$validated['roles']])            ]            // 'roles' => [$validated['roles']] // Array wrapped in json_encode        );        return response()->json([            'message' => 'User invited successfully',            'data' => [                'user_id' => $user->id,                'roles' => $validated['roles']            ]        ], 201);    }}"
        },
        {
            "type": "Controller",
            "name": "OrganizationUnitController",
            "file": "./app/Http/Controllers/Api/OrganizationUnitController.php",
            "content": "<?phpnamespace App\\Http\\Controllers\\Api;use App\\Http\\Controllers\\Controller;use App\\Models\\Organization;use Illuminate\\Http\\Request;use App\\Models\\OrganizationUnit;use Illuminate\\Support\\Facades\\Gate;class OrganizationUnitController extends Controller{    /**     * Display a listing of the resource.     */    public function index()    {        //    }    /**     * Store a newly created resource in storage.     */    // app/Http/Controllers/Api/OrganizationUnitController.php    public function store(Request $request, Organization $organization)    {        // $this->authorize('create', [OrganizationUnit::class, $organization]);        Gate::authorize('create', [OrganizationUnit::class, $organization]);        $validated = $request->validate([            'name' => 'required|string|max:255',            'type' => 'required|string|max:255',            'parent_id' => 'nullable|exists:organization_units,id,organization_id,' . $organization->id,            // 'custom_fields' => 'nullable|array'        ]);        $orgData = [            'name' => $validated['name'],            'type' => $validated['type'],            'parent_id' => $validated['parent_id'] ?? null,            'organization_id' => $organization->id,            // 'custom_fields' => $validated['custom_fields'] ?? null,        ];        // if ($validated['parent_id']) {        //     dd($orgData);        // }        $unit = $organization->units()->create($orgData);        return response()->json([            'data' => $unit        ], 201);    }    /**     * Display the specified resource.     */    public function show(Organization $organization, OrganizationUnit $unit)    {        // $this->authorize('view', [$unit, $organization]);        return response()->json([            'data' => $unit->load(['parent', 'children'])        ]);    }    /**     * Update the specified resource in storage.     */    // In OrganizationUnitController.php    public function update(Request $request, Organization $organization, OrganizationUnit $unit)    {        // Authorization        if (Gate::denies('update', $organization)) {            abort(403, 'You are not authorized to update members');        }        $validated = $request->validate([            'name' => 'sometimes|required|string|max:255',            'type' => 'sometimes|required|string|max:255',            'parent_id' => 'nullable|exists:organization_units,id,organization_id,' . $organization->id,            'custom_fields' => 'nullable|array'        ]);        $unit->update($validated);        return response()->json(['data' => $unit->fresh()]);    }    public function destroy(Organization $organization, OrganizationUnit $unit)    {        // Authorization        if (Gate::denies('delete', $organization)) {            abort(403, 'You are not authorized to delete members');        }        // Prevent deletion if has children or members        if ($unit->children()->exists()) {            abort(422, 'Cannot delete unit with child units');        }        if ($organization->users()->where('organization_unit_id', $unit->id)->exists()) {            abort(422, 'Cannot delete unit with assigned members');        }        $unit->delete();        return response()->json(null, 204);    }    public function hierarchy(Organization $organization, OrganizationUnit $unit)    {        // Authorization        if (Gate::denies('view', $organization)) {            abort(403, 'You are not authorized to invite members');        }        return response()->json([            'data' => $unit->load(['children'])        ]);    }    public function assignUser(        Request $request,        Organization $organization,        OrganizationUnit $unit    ) {        // Verify unit belongs to organization        if ($unit->organization_id !== $organization->id) {            abort(403, 'This unit does not belong to the specified organization');        }        // // Authorization        if (Gate::denies('assign', $unit)) {            abort(403, 'You are not authorized to assign users to this unit');        }        // dd('ok');        $validated = $request->validate([            'user_id' => [                'required',                'exists:users,id',                function ($attribute, $value, $fail) use ($organization) {                    if (!$organization->users()->where('user_id', $value)->exists()) {                        $fail('The user is not a member of this organization');                    }                }            ],            'position' => 'nullable|string|max:255'        ]);        // Update the user's unit assignment        $organization->users()->updateExistingPivot($validated['user_id'], [            'organization_unit_id' => $unit->id,            'position' => $validated['position'] ?? null        ]);        return response()->json([            'message' => "
        },
        {
            "type": "Controller",
            "name": "ChartOfAccountsController",
            "file": "./app/Http/Controllers/Api/Accounting/ChartOfAccountsController.php",
            "content": "<?php// app/Http/Controllers/Api/Accounting/ChartOfAccountsController.phpnamespace App\\Http\\Controllers\\Api\\Accounting;use App\\Http\\Controllers\\Controller;use App\\Models\\Accounting\\ChartOfAccount;use App\\Http\\Requests\\StoreChartOfAccountRequest;use App\\Http\\Requests\\UpdateChartOfAccountRequest;use App\\Http\\Resources\\ChartOfAccountResource;class ChartOfAccountsController extends Controller{    public function index()    {        $accounts = ChartOfAccount::orderBy('code')->get();        return ChartOfAccountResource::collection($accounts);    }    public function store(StoreChartOfAccountRequest $request)    {        $account = ChartOfAccount::create($request->validated());        return new ChartOfAccountResource($account);    }    public function show(ChartOfAccount $account)    {        return new ChartOfAccountResource($account);    }    public function update(UpdateChartOfAccountRequest $request, ChartOfAccount $account)    {        $account->update($request->validated());        return new ChartOfAccountResource($account);    }    public function destroy(ChartOfAccount $account)    {        // Prevent deletion if has ledger entries        if ($account->ledgerEntries()->exists()) {            return response()->json([                'message' => 'Cannot delete account with transaction history'            ], 422);        }        $account->delete();        return response()->noContent();    }}"
        },
        {
            "type": "Controller",
            "name": "FinancialReportsController",
            "file": "./app/Http/Controllers/Api/Accounting/FinancialReportsController.php",
            "content": "<?phpnamespace App\\Http\\Controllers\\Api\\Accounting;use App\\Http\\Controllers\\Controller;use App\\Services\\AccountingReportService;use Illuminate\\Http\\Request;use Illuminate\\Http\\JsonResponse;class FinancialReportsController extends Controller{    protected $reportService;    public function __construct(AccountingReportService $reportService)    {        $this->reportService = $reportService;    }    /**     * Generate Trial Balance report     */    public function trialBalance(Request $request): JsonResponse    {        $request->validate([            'as_of_date' => 'nullable|date',        ]);        $asOfDate = $request->input('as_of_date') ?: now();        try {            $trialBalance = $this->reportService->generateTrialBalance($asOfDate);            return response()->json([                'data' => $trialBalance,                'message' => 'Trial balance generated successfully'            ]);        } catch (\\Exception $e) {            return response()->json([                'message' => 'Failed to generate trial balance: ' . $e->getMessage()            ], 500);        }    }    /**     * Generate Balance Sheet report     */    public function balanceSheet(Request $request): JsonResponse    {        $request->validate([            'as_of_date' => 'nullable|date',        ]);        $asOfDate = $request->input('as_of_date') ?: now();        try {            $balanceSheet = $this->reportService->generateBalanceSheet($asOfDate);            return response()->json([                'data' => $balanceSheet,                'message' => 'Balance sheet generated successfully'            ]);        } catch (\\Exception $e) {            return response()->json([                'message' => 'Failed to generate balance sheet: ' . $e->getMessage()            ], 500);        }    }    /**     * Generate Income Statement (Profit & Loss) report     */    public function incomeStatement(Request $request): JsonResponse    {        $request->validate([            'start_date' => 'required|date',            'end_date' => 'required|date|after_or_equal:start_date',        ]);        try {            $incomeStatement = $this->reportService->generateIncomeStatement(                (new \\DateTime($request->input('start_date'))),                (new \\DateTime($request->input('end_date')))            );            return response()->json([                'data' => $incomeStatement,                'message' => 'Income statement generated successfully'            ]);        } catch (\\Exception $e) {            return response()->json([                'message' => 'Failed to generate income statement: ' . $e->getMessage()            ], 500);        }    }    // The following methods can be removed since we don't need CRUD for reports    // public function index() {}    // public function store(Request $request) {}    // public function show(string $id) {}    // public function update(Request $request, string $id) {}    // public function destroy(string $id) {}}"
        },
        {
            "type": "Controller",
            "name": "JournalEntriesController",
            "file": "./app/Http/Controllers/Api/Accounting/JournalEntriesController.php",
            "content": "<?php// app/Http/Controllers/Api/Accounting/JournalEntriesController.phpnamespace App\\Http\\Controllers\\Api\\Accounting;use App\\Http\\Controllers\\Controller;use App\\Models\\Accounting\\JournalEntry;use App\\Http\\Requests\\StoreJournalEntryRequest;use App\\Http\\Requests\\UpdateJournalEntryRequest;use App\\Http\\Resources\\JournalEntryResource;use App\\Services\\AccountingService;class JournalEntriesController extends Controller{    protected $accountingService;    public function __construct(AccountingService $accountingService)    {        $this->accountingService = $accountingService;    }    public function index()    {        $entries = JournalEntry::with(['ledgerEntries.account'])->latest()->get();        return JournalEntryResource::collection($entries);    }    // app/Http/Controllers/Api/Accounting/JournalEntriesController.php    public function store(StoreJournalEntryRequest $request)    {        $journalEntry = JournalEntry::create(            $request->only(['entry_date', 'description']) +                ['created_by' => auth()->id()]        );        // Process the ledger entries (to be implemented)        // This will use the AccountingService to create balanced entries        return new JournalEntryResource($journalEntry->load('ledgerEntries'));    }    public function update(UpdateJournalEntryRequest $request, JournalEntry $journalEntry)    {        abort_if($journalEntry->status !== 'draft', 422, 'Only draft entries can be updated');        $journalEntry->update($request->validated());        // Update ledger entries if provided        if ($request->has('entries')) {            // Delete existing entries and create new ones            $journalEntry->ledgerEntries()->delete();            // Process new entries using AccountingService        }        return new JournalEntryResource($journalEntry->load('ledgerEntries'));    }    public function show(JournalEntry $journalEntry)    {        return new JournalEntryResource($journalEntry->load('ledgerEntries.account'));    }    public function post(JournalEntry $journalEntry)    {        abort_if($journalEntry->status !== 'draft', 422, 'Only draft entries can be posted');        $journalEntry->update([            'status' => 'posted',            'posted_at' => now(),            'approved_by' => auth()->id()        ]);        return new JournalEntryResource($journalEntry);    }    public function void(JournalEntry $journalEntry)    {        abort_if($journalEntry->status !== 'posted', 422, 'Only posted entries can be voided');        $journalEntry->void();        return new JournalEntryResource($journalEntry);    }}"
        },
        {
            "type": "Controller",
            "name": "OrganizationController",
            "file": "./app/Http/Controllers/OrganizationController.php",
            "content": "<?php// app/Http/Controllers/OrganizationController.phpnamespace App\\Http\\Controllers;use Illuminate\\Http\\Request;class OrganizationController extends Controller{    public function index()    {        return view('organizations.index');    }}"
        },
        {
            "type": "Controller",
            "name": "AccountsController",
            "file": "./app/Http/Controllers/AccountsController.php",
            "content": "<?phpnamespace App\\Http\\Controllers;use Illuminate\\Http\\Request;class AccountsController extends Controller{    public function index()    {        return view('accounts.index');    }}"
        },
        {
            "type": "Migration",
            "name": "0001_01_01_000000_create_users_table",
            "file": "./database/migrations/0001_01_01_000000_create_users_table.php",
            "content": "<?phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    /**     * Run the migrations.     */    public function up(): void    {        Schema::create('users', function (Blueprint $table) {            $table->id();            $table->string('name');            $table->string('email')->unique();            $table->timestamp('email_verified_at')->nullable();            $table->string('password');            $table->rememberToken();            $table->foreignId('current_team_id')->nullable();            $table->string('profile_photo_path', 2048)->nullable();            $table->timestamps();        });        Schema::create('password_reset_tokens', function (Blueprint $table) {            $table->string('email')->primary();            $table->string('token');            $table->timestamp('created_at')->nullable();        });        Schema::create('sessions', function (Blueprint $table) {            $table->string('id')->primary();            $table->foreignId('user_id')->nullable()->index();            $table->string('ip_address', 45)->nullable();            $table->text('user_agent')->nullable();            $table->longText('payload');            $table->integer('last_activity')->index();        });    }    /**     * Reverse the migrations.     */    public function down(): void    {        Schema::dropIfExists('users');        Schema::dropIfExists('password_reset_tokens');        Schema::dropIfExists('sessions');    }};"
        },
        {
            "type": "Migration",
            "name": "0001_01_01_000001_create_cache_table",
            "file": "./database/migrations/0001_01_01_000001_create_cache_table.php",
            "content": "<?phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    /**     * Run the migrations.     */    public function up(): void    {        Schema::create('cache', function (Blueprint $table) {            $table->string('key')->primary();            $table->mediumText('value');            $table->integer('expiration');        });        Schema::create('cache_locks', function (Blueprint $table) {            $table->string('key')->primary();            $table->string('owner');            $table->integer('expiration');        });    }    /**     * Reverse the migrations.     */    public function down(): void    {        Schema::dropIfExists('cache');        Schema::dropIfExists('cache_locks');    }};"
        },
        {
            "type": "Migration",
            "name": "0001_01_01_000002_create_jobs_table",
            "file": "./database/migrations/0001_01_01_000002_create_jobs_table.php",
            "content": "<?phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    /**     * Run the migrations.     */    public function up(): void    {        Schema::create('jobs', function (Blueprint $table) {            $table->id();            $table->string('queue')->index();            $table->longText('payload');            $table->unsignedTinyInteger('attempts');            $table->unsignedInteger('reserved_at')->nullable();            $table->unsignedInteger('available_at');            $table->unsignedInteger('created_at');        });        Schema::create('job_batches', function (Blueprint $table) {            $table->string('id')->primary();            $table->string('name');            $table->integer('total_jobs');            $table->integer('pending_jobs');            $table->integer('failed_jobs');            $table->longText('failed_job_ids');            $table->mediumText('options')->nullable();            $table->integer('cancelled_at')->nullable();            $table->integer('created_at');            $table->integer('finished_at')->nullable();        });        Schema::create('failed_jobs', function (Blueprint $table) {            $table->id();            $table->string('uuid')->unique();            $table->text('connection');            $table->text('queue');            $table->longText('payload');            $table->longText('exception');            $table->timestamp('failed_at')->useCurrent();        });    }    /**     * Reverse the migrations.     */    public function down(): void    {        Schema::dropIfExists('jobs');        Schema::dropIfExists('job_batches');        Schema::dropIfExists('failed_jobs');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_06_22_091725_add_two_factor_columns_to_users_table",
            "file": "./database/migrations/2025_06_22_091725_add_two_factor_columns_to_users_table.php",
            "content": "<?phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    /**     * Run the migrations.     */    public function up(): void    {        Schema::table('users', function (Blueprint $table) {            $table->text('two_factor_secret')                ->after('password')                ->nullable();            $table->text('two_factor_recovery_codes')                ->after('two_factor_secret')                ->nullable();            $table->timestamp('two_factor_confirmed_at')                ->after('two_factor_recovery_codes')                ->nullable();        });    }    /**     * Reverse the migrations.     */    public function down(): void    {        Schema::table('users', function (Blueprint $table) {            $table->dropColumn([                'two_factor_secret',                'two_factor_recovery_codes',                'two_factor_confirmed_at',            ]);        });    }};"
        },
        {
            "type": "Migration",
            "name": "2025_06_22_091750_create_personal_access_tokens_table",
            "file": "./database/migrations/2025_06_22_091750_create_personal_access_tokens_table.php",
            "content": "<?phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    /**     * Run the migrations.     */    public function up(): void    {        Schema::create('personal_access_tokens', function (Blueprint $table) {            $table->id();            $table->morphs('tokenable');            $table->string('name');            $table->string('token', 64)->unique();            $table->text('abilities')->nullable();            $table->timestamp('last_used_at')->nullable();            $table->timestamp('expires_at')->nullable();            $table->timestamps();        });    }    /**     * Reverse the migrations.     */    public function down(): void    {        Schema::dropIfExists('personal_access_tokens');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_06_22_091750_create_teams_table",
            "file": "./database/migrations/2025_06_22_091750_create_teams_table.php",
            "content": "<?phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    /**     * Run the migrations.     */    public function up(): void    {        Schema::create('teams', function (Blueprint $table) {            $table->id();            $table->foreignId('user_id')->index();            $table->string('name');            $table->boolean('personal_team');            $table->timestamps();        });    }    /**     * Reverse the migrations.     */    public function down(): void    {        Schema::dropIfExists('teams');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_06_22_091751_create_team_user_table",
            "file": "./database/migrations/2025_06_22_091751_create_team_user_table.php",
            "content": "<?phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    /**     * Run the migrations.     */    public function up(): void    {        Schema::create('team_user', function (Blueprint $table) {            $table->id();            $table->foreignId('team_id');            $table->foreignId('user_id');            $table->string('role')->nullable();            $table->timestamps();            $table->unique(['team_id', 'user_id']);        });    }    /**     * Reverse the migrations.     */    public function down(): void    {        Schema::dropIfExists('team_user');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_06_22_091752_create_team_invitations_table",
            "file": "./database/migrations/2025_06_22_091752_create_team_invitations_table.php",
            "content": "<?phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    /**     * Run the migrations.     */    public function up(): void    {        Schema::create('team_invitations', function (Blueprint $table) {            $table->id();            $table->foreignId('team_id')->constrained()->cascadeOnDelete();            $table->string('email');            $table->string('role')->nullable();            $table->timestamps();            $table->unique(['team_id', 'email']);        });    }    /**     * Reverse the migrations.     */    public function down(): void    {        Schema::dropIfExists('team_invitations');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_08_06_220325_create_organizations_table",
            "file": "./database/migrations/2025_08_06_220325_create_organizations_table.php",
            "content": "<?phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    /**     * Run the migrations.     */    public function up(): void    {        Schema::create('organizations', function (Blueprint $table) {            $table->id();            $table->string('name')->unique();            $table->text('description')->nullable();            $table->boolean('is_active')->default(true);            $table->softDeletes();            $table->timestamps();        });    }    /**     * Reverse the migrations.     */    public function down(): void    {        Schema::dropIfExists('organizations');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_08_10_161714_create_organization_user_table",
            "file": "./database/migrations/2025_08_10_161714_create_organization_user_table.php",
            "content": "<?phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    /**     * Run the migrations.     */    public function up(): void    {        Schema::create('organization_user', function (Blueprint $table) {            $table->id();            $table->foreignId('organization_id')->constrained();            $table->foreignId('user_id')->constrained();            $table->foreignId('organization_unit_id')->nullable()->constrained('organization_units');            $table->json('roles')->nullable();            $table->json('permissions')->nullable();            $table->string('position')->nullable();            $table->timestamps();        });    }    /**     * Reverse the migrations.     */    public function down(): void    {        Schema::dropIfExists('organization_user');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_08_10_162609_create_organization_units",
            "file": "./database/migrations/2025_08_10_162609_create_organization_units.php",
            "content": "<?phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    /**     * Run the migrations.     */    public function up(): void    {        Schema::create('organization_units', function (Blueprint $table) {            $table->id();            $table->foreignId('organization_id')                ->nullable()                ->constrained()                ->nullOnDelete();            $table->string('name');            $table->string('type')->nullable(); // department, team, etc.            $table->foreignId('parent_id')                ->nullable()                ->constrained('organization_units')                ->nullOnDelete();            // $table->integer('depth')->default(0);            $table->json('custom_fields')->nullable();            $table->softDeletes();            $table->timestamps();            // Add index for better performance on hierarchical queries            // $table->index(['parent_id']);        });    }    /**     * Reverse the migrations.     */    public function down(): void    {        Schema::dropIfExists('organization_units');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_08_20_152855_create_chart_of_accounts_table",
            "file": "./database/migrations/2025_08_20_152855_create_chart_of_accounts_table.php",
            "content": "<?phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    /**     * Run the migrations.     */    public function up(): void    {        // In the migration file        Schema::create('chart_of_accounts', function (Blueprint $table) {            $table->id();            $table->string('code')->unique();            $table->string('name');            $table->enum('type', ['asset', 'liability', 'equity', 'revenue', 'expense']);            $table->text('description')->nullable();            $table->timestamps();        });    }    /**     * Reverse the migrations.     */    public function down(): void    {        Schema::dropIfExists('chart_of_accounts');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_08_20_160558_create_ledger_entries_table",
            "file": "./database/migrations/2025_08_20_160558_create_ledger_entries_table.php",
            "content": "<?php// database/migrations/xxxx_create_ledger_entries_table.phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;use Illuminate\\Support\\Facades\\DB;return new class extends Migration{    public function up(): void    {        Schema::create('ledger_entries', function (Blueprint $table) {            $table->id();            $table->date('entry_date');            $table->foreignId('chart_of_account_id')->constrained()->onDelete('cascade');            $table->enum('type', ['debit', 'credit']);            $table->decimal('amount', 15, 2)->unsigned(); // <-- ADD UNSIGNED HERE            $table->text('description');            // Laravel 12 proper way - nullable polymorphic relationship            $table->nullableMorphs('transactionable');            $table->timestamps();        });        // For databases that support check constraints (not SQLite)        if (DB::getDriverName() !== 'sqlite') {            DB::statement('ALTER TABLE ledger_entries ADD CONSTRAINT amount_positive CHECK (amount >= 0)');        }    }    public function down(): void    {        Schema::dropIfExists('ledger_entries');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_08_20_160925_create_test_transactions_table",
            "file": "./database/migrations/2025_08_20_160925_create_test_transactions_table.php",
            "content": "<?php// database/migrations/xxxx_create_test_transactions_table.phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    public function up(): void    {        Schema::create('test_transactions', function (Blueprint $table) {            $table->id();            $table->decimal('amount', 15, 2);            $table->timestamps();        });    }    public function down(): void    {        Schema::dropIfExists('test_transactions');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_08_20_170904_create_dimensions_table",
            "file": "./database/migrations/2025_08_20_170904_create_dimensions_table.php",
            "content": "<?phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    /**     * Run the migrations.     */    public function up(): void    {        Schema::create('dimensions', function (Blueprint $table) {            $table->id();            $table->string('name');            $table->string('code')->unique(); // Unique identifier for the dimension            $table->enum('type', ['cost_center', 'project', 'branch', 'department', 'team']);            $table->text('description')->nullable();            $table->timestamps();            // Add index for better performance on type-based queries            $table->index('type');        });    }    /**     * Reverse the migrations.     */    public function down(): void    {        Schema::dropIfExists('dimensions');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_08_20_175351_create_dimensionables_table",
            "file": "./database/migrations/2025_08_20_175351_create_dimensionables_table.php",
            "content": "<?php// database/migrations/xxxx_create_dimensionables_table.phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    public function up(): void    {        Schema::create('dimensionables', function (Blueprint $table) {            $table->id();            $table->foreignId('dimension_id')->constrained()->onDelete('cascade');            $table->morphs('dimensionable'); // This will link to ledger_entries, budgets, etc.            $table->timestamps();            // Optional: Add unique constraint to prevent duplicate assignments            $table->unique(['dimension_id', 'dimensionable_id', 'dimensionable_type'], 'dimensionable_unique');        });    }    public function down(): void    {        Schema::dropIfExists('dimensionables');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_08_20_185027_create_journal_entries_table",
            "file": "./database/migrations/2025_08_20_185027_create_journal_entries_table.php",
            "content": "<?php// database/migrations/xxxx_create_journal_entries_table.phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    public function up(): void    {        Schema::create('journal_entries', function (Blueprint $table) {            $table->id();            $table->string('reference_number')->unique();            $table->date('entry_date');            $table->text('description');            $table->enum('status', ['draft', 'posted', 'void'])->default('draft');            $table->foreignId('created_by')->constrained('users');            $table->foreignId('approved_by')->nullable()->constrained('users');            $table->timestamp('posted_at')->nullable();            $table->timestamps();        });    }    public function down(): void    {        Schema::dropIfExists('journal_entries');    }};"
        },
        {
            "type": "Migration",
            "name": "2025_08_22_150819_create_sequences_table",
            "file": "./database/migrations/2025_08_22_150819_create_sequences_table.php",
            "content": "<?php// database/migrations/xxxx_create_sequences_table.phpuse Illuminate\\Database\\Migrations\\Migration;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Support\\Facades\\Schema;return new class extends Migration{    public function up(): void    {        Schema::create('sequences', function (Blueprint $table) {            $table->string('name')->primary(); // e.g., 'journal_entry_ref', 'invoice_number'            $table->unsignedBigInteger('last_value')->default(0);            $table->unsignedBigInteger('increment_by')->default(1);            $table->string('prefix')->nullable(); // e.g., 'JE-', 'INV-'            $table->string('suffix')->nullable();            $table->integer('pad_length')->default(0); // e.g., 6 → JE-000001            $table->timestamps();        });        // Pre-populate with required sequences        DB::table('sequences')->insert([            ['name' => 'journal_entry_ref', 'prefix' => 'JE-', 'pad_length' => 6, 'last_value' => 0],            ['name' => 'invoice_number', 'prefix' => 'INV-', 'pad_length' => 6, 'last_value' => 0],            ['name' => 'purchase_order', 'prefix' => 'PO-', 'pad_length' => 6, 'last_value' => 0],            ['name' => 'payment_voucher', 'prefix' => 'PV-', 'pad_length' => 6, 'last_value' => 0],        ]);    }    public function down(): void    {        Schema::dropIfExists('sequences');    }};"
        },
        {
            "type": "Route",
            "name": "console",
            "file": "./routes/console.php",
            "content": "<?phpuse Illuminate\\Foundation\\Inspiring;use Illuminate\\Support\\Facades\\Artisan;Artisan::command('inspire', function () {    $this->comment(Inspiring::quote());})->purpose('Display an inspiring quote');"
        },
        {
            "type": "Route",
            "name": "web",
            "file": "./routes/web.php",
            "content": "<?phpuse App\\Http\\Controllers\\AccountsController;use App\\Http\\Controllers\\OrganizationController;use App\\Http\\Livewire\\Organization\\OrganizationList;use App\\Livewire\\OrganizationTree;use Illuminate\\Support\\Facades\\Route;Route::get('/', function () {    return view('welcome');});Route::middleware([    'auth:sanctum',    config('jetstream.auth_session'),    'verified',])->group(function () {    Route::get('/dashboard', function () {        return view('dashboard');    })->name('dashboard');});// routes/web.phpRoute::middleware(['auth', 'verified'])->group(function () {    // Company routes    // Route::livewire(['/organizations', OrganizationList::class])->name('organizations.index');    Route::get('/organizations', [OrganizationController::class, 'index'])->name('organizations.index');    Route::get('/org-tree', OrganizationTree::class);    // Route::get('/companies/create', CompanyForm::class)->name('companies.create');    // Route::get('/companies/{company}/edit', CompanyForm::class)->name('companies.edit');    // Route::get('/companies/{company}', CompanyShow::class)->name('companies.show');    // // Organization unit routes    // Route::get('/units', UnitTree::class)->name('units.index');    // Route::get('/units/create', UnitForm::class)->name('units.create');    // Route::get('/units/{unit}/edit', UnitForm::class)->name('units.edit');    // // Employee routes    // Route::get('/employees', EmployeeList::class)->name('employees.index');    // Route::get('/employees/create', EmployeeForm::class)->name('employees.create');    // Route::get('/employees/{employee}/edit', EmployeeForm::class)->name('employees.edit');    // Route::get('/employees/{employee}', EmployeeShow::class)->name('employees.show');    // // User management routes    // Route::get('/users', UserList::class)->name('users.index');    // Route::get('/users/create', UserForm::class)->name('users.create');    // Route::get('/users/{user}/edit', UserForm::class)->name('users.edit');    // Route::get('/roles', RoleManager::class)->name('roles.index');    // });    Route::get('/accounts', [AccountsController::class, 'index'])->name('accounting.index');});// Temporary debug routeRoute::get('/debug/api-config', function () {    return response()->json([        'app_url' => config('app.url'),        'api_url' => config('app.api_url'),        'env_api_url' => env('API_URL'),        'full_api_endpoint' => config('app.api_url') . '/journal-entries',        'is_local' => app()->isLocal(),        'environment' => app()->environment(),        'cors_config' => config('cors'),        'timezone' => config('app.timezone')    ]);});"
        },
        {
            "type": "Route",
            "name": "api",
            "file": "./routes/api.php",
            "content": "<?phpuse App\\Http\\Controllers\\Api\\Accounting\\ChartOfAccountsController;use App\\Http\\Controllers\\Api\\Accounting\\JournalEntriesController;use App\\Http\\Controllers\\Api\\Accounting\\FinancialReportsController;use App\\Http\\Controllers\\Api\\OrganizationController;use App\\Http\\Controllers\\Api\\OrganizationInvitationController;use App\\Http\\Controllers\\Api\\OrganizationUnitController;use App\\Models\\Accounting\\JournalEntry;use Illuminate\\Http\\Request;use Illuminate\\Support\\Facades\\Route;Route::get('/user', function (Request $request) {    return $request->user();})->middleware('auth:sanctum');/** * @OA\\Info(title=\"Attendance System API\", version=\"0.1\") *//** * @OA\\SecurityScheme( *     securityScheme=\"bearerAuth\", *     type=\"http\", *     scheme=\"bearer\", *     bearerFormat=\"JWT\" * ) */Route::middleware('auth:sanctum')->group(function () {    /**     * @OA\\Tag(name=\"Organizations\")     */    /**     * @OA\\Get(     *     path=\"/api/organizations\",     *     tags={\"Organizations\"},     *     security={{\"bearerAuth\":{}}},     *     @OA\\Response(response=\"200\", description=\"List organizations\")     * )     */    // User organizations    Route::get('/users/me/organizations', function (Request $request) {        return response()->json([            'data' => $request->user()->organizations        ]);    });    // Organization CRUD    Route::apiResource('organizations', OrganizationController::class);    // Organization-specific routes    Route::prefix('organizations/{organization}')->group(function () {        // Members        Route::get('members', [OrganizationController::class, 'members']);        // Invitations        Route::post('invitations', [OrganizationInvitationController::class, 'store']);        // Units - using singular 'unit' for consistency        Route::prefix('units')->group(function () {            Route::get('/', [OrganizationUnitController::class, 'index']);            Route::post('/', [OrganizationUnitController::class, 'store']);            // Specific unit operations            Route::prefix('{unit}')->group(function () {                Route::get('/', [OrganizationUnitController::class, 'show']);                Route::put('/', [OrganizationUnitController::class, 'update']);                Route::delete('/', [OrganizationUnitController::class, 'destroy']);                // Unit-specific features                Route::get('hierarchy', [OrganizationUnitController::class, 'hierarchy']);                Route::get('members', [OrganizationUnitController::class, 'members']);                Route::put('assign', [OrganizationUnitController::class, 'assignUser']);                Route::post('bulk-assign', [OrganizationUnitController::class, 'bulkAssign']);            });        });    });    // Chart of Accounts routes    Route::apiResource('accounts', ChartOfAccountsController::class);    // Journal Entries routes    Route::apiResource('journal-entries', JournalEntriesController::class);    Route::put('journal-entries/{journal_entry}/post', [JournalEntriesController::class, 'post']);    Route::put('journal-entries/{journal_entry}/void', [JournalEntriesController::class, 'void']);    // Financial Reports routes    Route::prefix('reports')->group(function () {        Route::get('trial-balance', [FinancialReportsController::class, 'trialBalance']);        Route::get('balance-sheet', [FinancialReportsController::class, 'balanceSheet']);        Route::get('income-statement', [FinancialReportsController::class, 'incomeStatement']);    });});// Temporary test routeRoute::get('/debug/test-connection', function () {    return response()->json([        'message' => 'API is working!',        'timestamp' => now(),        'data' => JournalEntry::count() // if you have this model    ]);});"
        },
        {
            "type": "View",
            "name": "api-token-manager.blade.php",
            "file": "./resources/views/api/api-token-manager.blade.php",
            "content": "<div>    <!-- Generate API Token -->    <x-form-section submit=\"createApiToken\">        <x-slot name=\"title\">            {{ __('Create API Token') }}        </x-slot>        <x-slot name=\"description\">            {{ __('API tokens allow third-party services to authenticate with our application on your behalf.') }}        </x-slot>        <x-slot name=\"form\">            <!-- Token Name -->            <div class=\"col-span-6 sm:col-span-4\">                <x-label for=\"name\" value=\"{{ __('Token Name') }}\" />                <x-input id=\"name\" type=\"text\" class=\"mt-1 block w-full\" wire:model=\"createApiTokenForm.name\" autofocus />                <x-input-error for=\"name\" class=\"mt-2\" />            </div>            <!-- Token Permissions -->            @if (Laravel\\Jetstream\\Jetstream::hasPermissions())                <div class=\"col-span-6\">                    <x-label for=\"permissions\" value=\"{{ __('Permissions') }}\" />                    <div class=\"mt-2 grid grid-cols-1 md:grid-cols-2 gap-4\">                        @foreach (Laravel\\Jetstream\\Jetstream::$permissions as $permission)                            <label class=\"flex items-center\">                                <x-checkbox wire:model=\"createApiTokenForm.permissions\" :value=\"$permission\"/>                                <span class=\"ms-2 text-sm text-gray-600 dark:text-gray-400\">{{ $permission }}</span>                            </label>                        @endforeach                    </div>                </div>            @endif        </x-slot>        <x-slot name=\"actions\">            <x-action-message class=\"me-3\" on=\"created\">                {{ __('Created.') }}            </x-action-message>            <x-button>                {{ __('Create') }}            </x-button>        </x-slot>    </x-form-section>    @if ($this->user->tokens->isNotEmpty())        <x-section-border />        <!-- Manage API Tokens -->        <div class=\"mt-10 sm:mt-0\">            <x-action-section>                <x-slot name=\"title\">                    {{ __('Manage API Tokens') }}                </x-slot>                <x-slot name=\"description\">                    {{ __('You may delete any of your existing tokens if they are no longer needed.') }}                </x-slot>                <!-- API Token List -->                <x-slot name=\"content\">                    <div class=\"space-y-6\">                        @foreach ($this->user->tokens->sortBy('name') as $token)                            <div class=\"flex items-center justify-between\">                                <div class=\"break-all dark:text-white\">                                    {{ $token->name }}                                </div>                                <div class=\"flex items-center ms-2\">                                    @if ($token->last_used_at)                                        <div class=\"text-sm text-gray-400\">                                            {{ __('Last used') }} {{ $token->last_used_at->diffForHumans() }}                                        </div>                                    @endif                                    @if (Laravel\\Jetstream\\Jetstream::hasPermissions())                                        <button class=\"cursor-pointer ms-6 text-sm text-gray-400 underline\" wire:click=\"manageApiTokenPermissions({{ $token->id }})\">                                            {{ __('Permissions') }}                                        </button>                                    @endif                                    <button class=\"cursor-pointer ms-6 text-sm text-red-500\" wire:click=\"confirmApiTokenDeletion({{ $token->id }})\">                                        {{ __('Delete') }}                                    </button>                                </div>                            </div>                        @endforeach                    </div>                </x-slot>            </x-action-section>        </div>    @endif    <!-- Token Value Modal -->    <x-dialog-modal wire:model.live=\"displayingToken\">        <x-slot name=\"title\">            {{ __('API Token') }}        </x-slot>        <x-slot name=\"content\">            <div>                {{ __('Please copy your new API token. For your security, it won\\'t be shown again.') }}            </div>            <x-input x-ref=\"plaintextToken\" type=\"text\" readonly :value=\"$plainTextToken\"                class=\"mt-4 bg-gray-100 px-4 py-2 rounded font-mono text-sm text-gray-500 w-full break-all\"                autofocus autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"                @showing-token-modal.window=\"setTimeout(() => $refs.plaintextToken.select(), 250)\"            />        </x-slot>        <x-slot name=\"footer\">            <x-secondary-button wire:click=\"$set('displayingToken', false)\" wire:loading.attr=\"disabled\">              "
        },
        {
            "type": "View",
            "name": "index.blade.php",
            "file": "./resources/views/api/index.blade.php",
            "content": "<x-app-layout>    <x-slot name=\"header\">        <h2 class=\"font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight\">            {{ __('API Tokens') }}        </h2>    </x-slot>    <div>        <div class=\"max-w-7xl mx-auto py-10 sm:px-6 lg:px-8\">            @livewire('api.api-token-manager')        </div>    </div></x-app-layout>"
        },
        {
            "type": "View",
            "name": "confirm-password.blade.php",
            "file": "./resources/views/auth/confirm-password.blade.php",
            "content": "<x-guest-layout>    <x-authentication-card>        <x-slot name=\"logo\">            <x-authentication-card-logo />        </x-slot>        <div class=\"mb-4 text-sm text-gray-600 dark:text-gray-400\">            {{ __('This is a secure area of the application. Please confirm your password before continuing.') }}        </div>        <x-validation-errors class=\"mb-4\" />        <form method=\"POST\" action=\"{{ route('password.confirm') }}\">            @csrf            <div>                <x-label for=\"password\" value=\"{{ __('Password') }}\" />                <x-input id=\"password\" class=\"block mt-1 w-full\" type=\"password\" name=\"password\" required autocomplete=\"current-password\" autofocus />            </div>            <div class=\"flex justify-end mt-4\">                <x-button class=\"ms-4\">                    {{ __('Confirm') }}                </x-button>            </div>        </form>    </x-authentication-card></x-guest-layout>"
        },
        {
            "type": "View",
            "name": "forgot-password.blade.php",
            "file": "./resources/views/auth/forgot-password.blade.php",
            "content": "<x-guest-layout>    <x-authentication-card>        <x-slot name=\"logo\">            <x-authentication-card-logo />        </x-slot>        <div class=\"mb-4 text-sm text-gray-600 dark:text-gray-400\">            {{ __('Forgot your password? No problem. Just let us know your email address and we will email you a password reset link that will allow you to choose a new one.') }}        </div>        @session('status')            <div class=\"mb-4 font-medium text-sm text-green-600 dark:text-green-400\">                {{ $value }}            </div>        @endsession        <x-validation-errors class=\"mb-4\" />        <form method=\"POST\" action=\"{{ route('password.email') }}\">            @csrf            <div class=\"block\">                <x-label for=\"email\" value=\"{{ __('Email') }}\" />                <x-input id=\"email\" class=\"block mt-1 w-full\" type=\"email\" name=\"email\" :value=\"old('email')\" required autofocus autocomplete=\"username\" />            </div>            <div class=\"flex items-center justify-end mt-4\">                <x-button>                    {{ __('Email Password Reset Link') }}                </x-button>            </div>        </form>    </x-authentication-card></x-guest-layout>"
        },
        {
            "type": "View",
            "name": "login.blade.php",
            "file": "./resources/views/auth/login.blade.php",
            "content": "<x-guest-layout>    <x-authentication-card>        <x-slot name=\"logo\">            <x-authentication-card-logo />        </x-slot>        <x-validation-errors class=\"mb-4\" />        @session('status')            <div class=\"mb-4 font-medium text-sm text-green-600 dark:text-green-400\">                {{ $value }}            </div>        @endsession        <form method=\"POST\" action=\"{{ route('login') }}\">            @csrf            <div>                <x-label for=\"email\" value=\"{{ __('Email') }}\" />                <x-input id=\"email\" class=\"block mt-1 w-full\" type=\"email\" name=\"email\" :value=\"old('email')\" required                    autofocus autocomplete=\"username\" />            </div>            <div class=\"mt-4\">                <x-label for=\"password\" value=\"{{ __('Password') }}\" />                <x-input id=\"password\" class=\"block mt-1 w-full\" type=\"password\" name=\"password\" required                    autocomplete=\"current-password\" />            </div>            <div class=\"block mt-4\">                <label for=\"remember_me\" class=\"flex items-center\">                    <x-checkbox id=\"remember_me\" name=\"remember\" />                    <span class=\"ms-2 text-sm text-gray-600 dark:text-gray-400\">{{ __('Remember me') }}</span>                </label>            </div>            <div class=\"flex items-center justify-end mt-4\">                @if (Route::has('password.request'))                    <a class=\"underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800\"                        href=\"{{ route('password.request') }}\">                        {{ __('Forgot your password?') }}                    </a>                @endif                <x-button class=\"ms-4\" type=\"submit\">                    {{ __('Log in') }}                </x-button>            </div>        </form>    </x-authentication-card></x-guest-layout>"
        },
        {
            "type": "View",
            "name": "register.blade.php",
            "file": "./resources/views/auth/register.blade.php",
            "content": "<x-guest-layout>    <x-authentication-card>        <x-slot name=\"logo\">            <x-authentication-card-logo />        </x-slot>        <x-validation-errors class=\"mb-4\" />        <form method=\"POST\" action=\"{{ route('register') }}\">            @csrf            <div>                <x-label for=\"name\" value=\"{{ __('Name') }}\" />                <x-input id=\"name\" class=\"block mt-1 w-full\" type=\"text\" name=\"name\" :value=\"old('name')\" required autofocus autocomplete=\"name\" />            </div>            <div class=\"mt-4\">                <x-label for=\"email\" value=\"{{ __('Email') }}\" />                <x-input id=\"email\" class=\"block mt-1 w-full\" type=\"email\" name=\"email\" :value=\"old('email')\" required autocomplete=\"username\" />            </div>            <div class=\"mt-4\">                <x-label for=\"password\" value=\"{{ __('Password') }}\" />                <x-input id=\"password\" class=\"block mt-1 w-full\" type=\"password\" name=\"password\" required autocomplete=\"new-password\" />            </div>            <div class=\"mt-4\">                <x-label for=\"password_confirmation\" value=\"{{ __('Confirm Password') }}\" />                <x-input id=\"password_confirmation\" class=\"block mt-1 w-full\" type=\"password\" name=\"password_confirmation\" required autocomplete=\"new-password\" />            </div>            @if (Laravel\\Jetstream\\Jetstream::hasTermsAndPrivacyPolicyFeature())                <div class=\"mt-4\">                    <x-label for=\"terms\">                        <div class=\"flex items-center\">                            <x-checkbox name=\"terms\" id=\"terms\" required />                            <div class=\"ms-2\">                                {!! __('I agree to the :terms_of_service and :privacy_policy', [                                        'terms_of_service' => '<a target=\"_blank\" href=\"'.route('terms.show').'\" class=\"underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800\">'.__('Terms of Service').'</a>',                                        'privacy_policy' => '<a target=\"_blank\" href=\"'.route('policy.show').'\" class=\"underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800\">'.__('Privacy Policy').'</a>',                                ]) !!}                            </div>                        </div>                    </x-label>                </div>            @endif            <div class=\"flex items-center justify-end mt-4\">                <a class=\"underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800\" href=\"{{ route('login') }}\">                    {{ __('Already registered?') }}                </a>                <x-button class=\"ms-4\">                    {{ __('Register') }}                </x-button>            </div>        </form>    </x-authentication-card></x-guest-layout>"
        },
        {
            "type": "View",
            "name": "reset-password.blade.php",
            "file": "./resources/views/auth/reset-password.blade.php",
            "content": "<x-guest-layout>    <x-authentication-card>        <x-slot name=\"logo\">            <x-authentication-card-logo />        </x-slot>        <x-validation-errors class=\"mb-4\" />        <form method=\"POST\" action=\"{{ route('password.update') }}\">            @csrf            <input type=\"hidden\" name=\"token\" value=\"{{ $request->route('token') }}\">            <div class=\"block\">                <x-label for=\"email\" value=\"{{ __('Email') }}\" />                <x-input id=\"email\" class=\"block mt-1 w-full\" type=\"email\" name=\"email\" :value=\"old('email', $request->email)\" required autofocus autocomplete=\"username\" />            </div>            <div class=\"mt-4\">                <x-label for=\"password\" value=\"{{ __('Password') }}\" />                <x-input id=\"password\" class=\"block mt-1 w-full\" type=\"password\" name=\"password\" required autocomplete=\"new-password\" />            </div>            <div class=\"mt-4\">                <x-label for=\"password_confirmation\" value=\"{{ __('Confirm Password') }}\" />                <x-input id=\"password_confirmation\" class=\"block mt-1 w-full\" type=\"password\" name=\"password_confirmation\" required autocomplete=\"new-password\" />            </div>            <div class=\"flex items-center justify-end mt-4\">                <x-button>                    {{ __('Reset Password') }}                </x-button>            </div>        </form>    </x-authentication-card></x-guest-layout>"
        },
        {
            "type": "View",
            "name": "two-factor-challenge.blade.php",
            "file": "./resources/views/auth/two-factor-challenge.blade.php",
            "content": "<x-guest-layout>    <x-authentication-card>        <x-slot name=\"logo\">            <x-authentication-card-logo />        </x-slot>        <div x-data=\"{ recovery: false }\">            <div class=\"mb-4 text-sm text-gray-600 dark:text-gray-400\" x-show=\"! recovery\">                {{ __('Please confirm access to your account by entering the authentication code provided by your authenticator application.') }}            </div>            <div class=\"mb-4 text-sm text-gray-600 dark:text-gray-400\" x-cloak x-show=\"recovery\">                {{ __('Please confirm access to your account by entering one of your emergency recovery codes.') }}            </div>            <x-validation-errors class=\"mb-4\" />            <form method=\"POST\" action=\"{{ route('two-factor.login') }}\">                @csrf                <div class=\"mt-4\" x-show=\"! recovery\">                    <x-label for=\"code\" value=\"{{ __('Code') }}\" />                    <x-input id=\"code\" class=\"block mt-1 w-full\" type=\"text\" inputmode=\"numeric\" name=\"code\" autofocus x-ref=\"code\" autocomplete=\"one-time-code\" />                </div>                <div class=\"mt-4\" x-cloak x-show=\"recovery\">                    <x-label for=\"recovery_code\" value=\"{{ __('Recovery Code') }}\" />                    <x-input id=\"recovery_code\" class=\"block mt-1 w-full\" type=\"text\" name=\"recovery_code\" x-ref=\"recovery_code\" autocomplete=\"one-time-code\" />                </div>                <div class=\"flex items-center justify-end mt-4\">                    <button type=\"button\" class=\"text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 underline cursor-pointer\"                                    x-show=\"! recovery\"                                    x-on:click=\"                                        recovery = true;                                        $nextTick(() => { $refs.recovery_code.focus() })                                    \">                        {{ __('Use a recovery code') }}                    </button>                    <button type=\"button\" class=\"text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 underline cursor-pointer\"                                    x-cloak                                    x-show=\"recovery\"                                    x-on:click=\"                                        recovery = false;                                        $nextTick(() => { $refs.code.focus() })                                    \">                        {{ __('Use an authentication code') }}                    </button>                    <x-button class=\"ms-4\">                        {{ __('Log in') }}                    </x-button>                </div>            </form>        </div>    </x-authentication-card></x-guest-layout>"
        },
        {
            "type": "View",
            "name": "verify-email.blade.php",
            "file": "./resources/views/auth/verify-email.blade.php",
            "content": "<x-guest-layout>    <x-authentication-card>        <x-slot name=\"logo\">            <x-authentication-card-logo />        </x-slot>        <div class=\"mb-4 text-sm text-gray-600 dark:text-gray-400\">            {{ __('Before continuing, could you verify your email address by clicking on the link we just emailed to you? If you didn\\'t receive the email, we will gladly send you another.') }}        </div>        @if (session('status') == 'verification-link-sent')            <div class=\"mb-4 font-medium text-sm text-green-600 dark:text-green-400\">                {{ __('A new verification link has been sent to the email address you provided in your profile settings.') }}            </div>        @endif        <div class=\"mt-4 flex items-center justify-between\">            <form method=\"POST\" action=\"{{ route('verification.send') }}\">                @csrf                <div>                    <x-button type=\"submit\">                        {{ __('Resend Verification Email') }}                    </x-button>                </div>            </form>            <div>                <a                    href=\"{{ route('profile.show') }}\"                    class=\"underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800\"                >                    {{ __('Edit Profile') }}</a>                <form method=\"POST\" action=\"{{ route('logout') }}\" class=\"inline\">                    @csrf                    <button type=\"submit\" class=\"underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800 ms-2\">                        {{ __('Log Out') }}                    </button>                </form>            </div>        </div>    </x-authentication-card></x-guest-layout>"
        },
        {
            "type": "View",
            "name": "action-message.blade.php",
            "file": "./resources/views/components/action-message.blade.php",
            "content": "@props(['on'])<div x-data=\"{ shown: false, timeout: null }\"    x-init=\"@this.on('{{ $on }}', () => { clearTimeout(timeout); shown = true; timeout = setTimeout(() => { shown = false }, 2000); })\"    x-show.transition.out.opacity.duration.1500ms=\"shown\"    x-transition:leave.opacity.duration.1500ms    style=\"display: none;\"    {{ $attributes->merge(['class' => 'text-sm text-gray-600 dark:text-gray-400']) }}>    {{ $slot->isEmpty() ? 'Saved.' : $slot }}</div>"
        },
        {
            "type": "View",
            "name": "action-section.blade.php",
            "file": "./resources/views/components/action-section.blade.php",
            "content": "<div {{ $attributes->merge(['class' => 'md:grid md:grid-cols-3 md:gap-6']) }}>    <x-section-title>        <x-slot name=\"title\">{{ $title }}</x-slot>        <x-slot name=\"description\">{{ $description }}</x-slot>    </x-section-title>    <div class=\"mt-5 md:mt-0 md:col-span-2\">        <div class=\"px-4 py-5 sm:p-6 bg-white dark:bg-gray-800 shadow sm:rounded-lg\">            {{ $content }}        </div>    </div></div>"
        },
        {
            "type": "View",
            "name": "application-logo.blade.php",
            "file": "./resources/views/components/application-logo.blade.php",
            "content": "<svg viewBox=\"0 0 317 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {{ $attributes }}>  <path d=\"M74.09 30.04V13h-4.14v21H82.1v-3.96h-8.01zM95.379 19v1.77c-1.08-1.35-2.7-2.19-4.89-2.19-3.99 0-7.29 3.45-7.29 7.92s3.3 7.92 7.29 7.92c2.19 0 3.81-.84 4.89-2.19V34h3.87V19h-3.87zm-4.17 11.73c-2.37 0-4.14-1.71-4.14-4.23 0-2.52 1.77-4.23 4.14-4.23 2.4 0 4.17 1.71 4.17 4.23 0 2.52-1.77 4.23-4.17 4.23zM106.628 21.58V19h-3.87v15h3.87v-7.17c0-3.15 2.55-4.05 4.56-3.81V18.7c-1.89 0-3.78.84-4.56 2.88zM124.295 19v1.77c-1.08-1.35-2.7-2.19-4.89-2.19-3.99 0-7.29 3.45-7.29 7.92s3.3 7.92 7.29 7.92c2.19 0 3.81-.84 4.89-2.19V34h3.87V19h-3.87zm-4.17 11.73c-2.37 0-4.14-1.71-4.14-4.23 0-2.52 1.77-4.23 4.14-4.23 2.4 0 4.17 1.71 4.17 4.23 0 2.52-1.77 4.23-4.17 4.23zM141.544 19l-3.66 10.5-3.63-10.5h-4.26l5.7 15h4.41l5.7-15h-4.26zM150.354 28.09h11.31c.09-.51.15-1.02.15-1.59 0-4.41-3.15-7.92-7.59-7.92-4.71 0-7.92 3.45-7.92 7.92s3.18 7.92 8.22 7.92c2.88 0 5.13-1.17 6.54-3.21l-3.12-1.8c-.66.87-1.86 1.5-3.36 1.5-2.04 0-3.69-.84-4.23-2.82zm-.06-3c.45-1.92 1.86-3.03 3.93-3.03 1.62 0 3.24.87 3.72 3.03h-7.65zM164.516 34h3.87V12.1h-3.87V34zM185.248 34.36c3.69 0 6.9-2.01 6.9-6.3V13h-2.1v15.06c0 3.03-2.07 4.26-4.8 4.26-2.19 0-3.93-.78-4.62-2.61l-1.77 1.05c1.05 2.43 3.57 3.6 6.39 3.6zM203.124 18.64c-4.65 0-7.83 3.45-7.83 7.86 0 4.53 3.24 7.86 7.98 7.86 3.03 0 5.34-1.41 6.6-3.45l-1.74-1.02c-.81 1.44-2.46 2.55-4.83 2.55-3.18 0-5.55-1.89-5.97-4.95h13.17c.03-.3.06-.63.06-.93 0-4.11-2.85-7.92-7.44-7.92zm0 1.92c2.58 0 4.98 1.71 5.4 5.01h-11.19c.39-2.94 2.64-5.01 5.79-5.01zM221.224 20.92V19h-4.32v-4.2l-1.98.6V19h-3.15v1.92h3.15v9.09c0 3.6 2.25 4.59 6.3 3.99v-1.74c-2.91.12-4.32.33-4.32-2.25v-9.09h4.32zM225.176 22.93c0-1.62 1.59-2.37 3.15-2.37 1.44 0 2.97.57 3.6 2.1l1.65-.96c-.87-1.86-2.79-3.06-5.25-3.06-3 0-5.13 1.89-5.13 4.29 0 5.52 8.76 3.39 8.76 7.11 0 1.77-1.68 2.4-3.45 2.4-2.01 0-3.57-.99-4.11-2.52l-1.68.99c.75 1.92 2.79 3.45 5.79 3.45 3.21 0 5.43-1.77 5.43-4.32 0-5.52-8.76-3.39-8.76-7.11zM244.603 20.92V19h-4.32v-4.2l-1.98.6V19h-3.15v1.92h3.15v9.09c0 3.6 2.25 4.59 6.3 3.99v-1.74c-2.91.12-4.32.33-4.32-2.25v-9.09h4.32zM249.883 21.49V19h-1.98v15h1.98v-8.34c0-3.72 2.34-4.98 4.74-4.98v-1.92c-1.92 0-3.69.63-4.74 2.73zM263.358 18.64c-4.65 0-7.83 3.45-7.83 7.86 0 4.53 3.24 7.86 7.98 7.86 3.03 0 5.34-1.41 6.6-3.45l-1.74-1.02c-.81 1.44-2.46 2.55-4.83 2.55-3.18 0-5.55-1.89-5.97-4.95h13.17c.03-.3.06-.63.06-.93 0-4.11-2.85-7.92-7.44-7.92zm0 1.92c2.58 0 4.98 1.71 5.4 5.01h-11.19c.39-2.94 2.64-5.01 5.79-5.01zM286.848 19v2.94c-1.26-2.01-3.39-3.3-6.06-3.3-4.23 0-7.74 3.42-7.74 7.86s3.51 7.86 7.74 7.86c2.67 0 4.8-1.29 6.06-3.3V34h1.98V19h-1.98zm-5.91 13.44c-3.33 0-5.91-2.61-5.91-5.94 0-3.33 2.58-5.94 5.91-5.94s5.91 2.61 5.91 5.94c0 3.33-2.58 5.94-5.91 5.94zM309.01 18.64c-1.92 0-3.75.87-4.86 2.73-.84-1.74-2.46-2.73-4.56-2.73-1.8 0-3.42.72-4.59 2.55V19h-1.98v15H295v-8.31c0-3.72 2.16-5.13 4.32-5.13 2.13 0 3.51 1.41 3.51 4.08V34h1.98v-8.31c0-3.72 1.86-5.13 4.17-5.13 2.13 0 3.66 1.41 3.66 4.08V34h1.98v-9.36c0-3.75-2.31-6-5.61-6z\" class=\"fill-black dark:fill-white\"/>  <path d=\"M11.395 44.428C4.557 40.198 0 32.632 0 24 0 10.745 10.745 0 24 0a23.891 23.891 0 0113.997 4.502c-.2 17.907-11.097 33.245-26.602 39.926z\" fill=\"#6875F5\"/>  <path d=\"M14.134 45.885A23.914 23.914 0 0024 48c13.255 0 24-10.745 24-24 0-3.516-.756-6.856-2.115-9.866-4.659 15.143-16.608 27.092-31.75 31.751z\" fill=\"#6875F5\"/></svg>"
        },
        {
            "type": "View",
            "name": "application-mark.blade.php",
            "file": "./resources/views/components/application-mark.blade.php",
            "content": "<svg viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {{ $attributes }}>  <path d=\"M11.395 44.428C4.557 40.198 0 32.632 0 24 0 10.745 10.745 0 24 0a23.891 23.891 0 0113.997 4.502c-.2 17.907-11.097 33.245-26.602 39.926z\" fill=\"#6875F5\"/>  <path d=\"M14.134 45.885A23.914 23.914 0 0024 48c13.255 0 24-10.745 24-24 0-3.516-.756-6.856-2.115-9.866-4.659 15.143-16.608 27.092-31.75 31.751z\" fill=\"#6875F5\"/></svg>"
        },
        {
            "type": "View",
            "name": "authentication-card-logo.blade.php",
            "file": "./resources/views/components/authentication-card-logo.blade.php",
            "content": "<a href=\"/\">    <svg class=\"size-16\" viewbox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">        <path d=\"M11.395 44.428C4.557 40.198 0 32.632 0 24 0 10.745 10.745 0 24 0a23.891 23.891 0 0113.997 4.502c-.2 17.907-11.097 33.245-26.602 39.926z\" fill=\"#6875F5\"/>        <path d=\"M14.134 45.885A23.914 23.914 0 0024 48c13.255 0 24-10.745 24-24 0-3.516-.756-6.856-2.115-9.866-4.659 15.143-16.608 27.092-31.75 31.751z\" fill=\"#6875F5\"/>    </svg></a>"
        },
        {
            "type": "View",
            "name": "authentication-card.blade.php",
            "file": "./resources/views/components/authentication-card.blade.php",
            "content": "<div class=\"min-h-screen flex flex-col sm:justify-center items-center pt-6 sm:pt-0 bg-gray-100 dark:bg-gray-900\">    <div>        {{ $logo }}    </div>    <div class=\"w-full sm:max-w-md mt-6 px-6 py-4 bg-white dark:bg-gray-800 shadow-md overflow-hidden sm:rounded-lg\">        {{ $slot }}    </div></div>"
        },
        {
            "type": "View",
            "name": "banner.blade.php",
            "file": "./resources/views/components/banner.blade.php",
            "content": "@props(['style' => session('flash.bannerStyle', 'success'), 'message' => session('flash.banner')])<div x-data=\"{{ json_encode(['show' => true, 'style' => $style, 'message' => $message]) }}\"    :class=\"{ 'bg-indigo-500': style == 'success', 'bg-red-700': style == 'danger', 'bg-yellow-500': style == 'warning', 'bg-gray-500': style != 'success' && style != 'danger' && style != 'warning'}\"            style=\"display: none;\"            x-show=\"show && message\"            x-on:banner-message.window=\"                style = event.detail.style;                message = event.detail.message;                show = true;            \">    <div class=\"max-w-screen-xl mx-auto py-2 px-3 sm:px-6 lg:px-8\">        <div class=\"flex items-center justify-between flex-wrap\">            <div class=\"w-0 flex-1 flex items-center min-w-0\">                <span class=\"flex p-2 rounded-lg\" :class=\"{ 'bg-indigo-600': style == 'success', 'bg-red-600': style == 'danger', 'bg-yellow-600': style == 'warning' }\">                    <svg x-show=\"style == 'success'\" class=\"size-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />                    </svg>                    <svg x-show=\"style == 'danger'\" class=\"size-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z\" />                    </svg>                    <svg x-show=\"style != 'success' && style != 'danger' && style != 'warning'\" class=\"size-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z\" />                    </svg>                    <svg x-show=\"style == 'warning'\" class=\"size-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">                        <circle cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"1.5\" fill=\"none\" />                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 8v4m0 4v.01 0 0 \" />                    </svg>                </span>                <p class=\"ms-3 font-medium text-sm text-white truncate\" x-text=\"message\"></p>            </div>            <div class=\"shrink-0 sm:ms-3\">                <button                    type=\"button\"                    class=\"-me-1 flex p-2 rounded-md focus:outline-none sm:-me-2 transition\"                    :class=\"{ 'hover:bg-indigo-600 focus:bg-indigo-600': style == 'success', 'hover:bg-red-600 focus:bg-red-600': style == 'danger', 'hover:bg-yellow-600 focus:bg-yellow-600': style == 'warning'}\"                    aria-label=\"Dismiss\"                    x-on:click=\"show = false\">                    <svg class=\"size-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />                    </svg>                </button>            </div>        </div>    </div></div>"
        },
        {
            "type": "View",
            "name": "checkbox.blade.php",
            "file": "./resources/views/components/checkbox.blade.php",
            "content": "<input type=\"checkbox\" {!! $attributes->merge(['class' => 'rounded dark:bg-gray-900 border-gray-300 dark:border-gray-700 text-indigo-600 shadow-sm focus:ring-indigo-500 dark:focus:ring-indigo-600 dark:focus:ring-offset-gray-800']) !!}>"
        },
        {
            "type": "View",
            "name": "confirmation-modal.blade.php",
            "file": "./resources/views/components/confirmation-modal.blade.php",
            "content": "@props(['id' => null, 'maxWidth' => null])<x-modal :id=\"$id\" :maxWidth=\"$maxWidth\" {{ $attributes }}>    <div class=\"bg-white dark:bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">        <div class=\"sm:flex sm:items-start\">            <div class=\"mx-auto shrink-0 flex items-center justify-center size-12 rounded-full bg-red-100 sm:mx-0 sm:size-10\">                <svg class=\"size-6 text-red-600 dark:text-red-400\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z\" />                </svg>            </div>            <div class=\"mt-3 text-center sm:mt-0 sm:ms-4 sm:text-start\">                <h3 class=\"text-lg font-medium text-gray-900 dark:text-gray-100\">                    {{ $title }}                </h3>                <div class=\"mt-4 text-sm text-gray-600 dark:text-gray-400\">                    {{ $content }}                </div>            </div>        </div>    </div>    <div class=\"flex flex-row justify-end px-6 py-4 bg-gray-100 dark:bg-gray-800 text-end\">        {{ $footer }}    </div></x-modal>"
        },
        {
            "type": "View",
            "name": "confirms-password.blade.php",
            "file": "./resources/views/components/confirms-password.blade.php",
            "content": "@props(['title' => __('Confirm Password'), 'content' => __('For your security, please confirm your password to continue.'), 'button' => __('Confirm')])@php    $confirmableId = md5($attributes->wire('then'));@endphp<span    {{ $attributes->wire('then') }}    x-data    x-ref=\"span\"    x-on:click=\"$wire.startConfirmingPassword('{{ $confirmableId }}')\"    x-on:password-confirmed.window=\"setTimeout(() => $event.detail.id === '{{ $confirmableId }}' && $refs.span.dispatchEvent(new CustomEvent('then', { bubbles: false })), 250);\">    {{ $slot }}</span>@once<x-dialog-modal wire:model.live=\"confirmingPassword\">    <x-slot name=\"title\">        {{ $title }}    </x-slot>    <x-slot name=\"content\">        {{ $content }}        <div class=\"mt-4\" x-data=\"{}\" x-on:confirming-password.window=\"setTimeout(() => $refs.confirmable_password.focus(), 250)\">            <x-input type=\"password\" class=\"mt-1 block w-3/4\" placeholder=\"{{ __('Password') }}\" autocomplete=\"current-password\"                        x-ref=\"confirmable_password\"                        wire:model=\"confirmablePassword\"                        wire:keydown.enter=\"confirmPassword\" />            <x-input-error for=\"confirmable_password\" class=\"mt-2\" />        </div>    </x-slot>    <x-slot name=\"footer\">        <x-secondary-button wire:click=\"stopConfirmingPassword\" wire:loading.attr=\"disabled\">            {{ __('Cancel') }}        </x-secondary-button>        <x-button class=\"ms-3\" dusk=\"confirm-password-button\" wire:click=\"confirmPassword\" wire:loading.attr=\"disabled\">            {{ $button }}        </x-button>    </x-slot></x-dialog-modal>@endonce"
        },
        {
            "type": "View",
            "name": "danger-button.blade.php",
            "file": "./resources/views/components/danger-button.blade.php",
            "content": "<button {{ $attributes->merge(['type' => 'button', 'class' => 'inline-flex items-center justify-center px-4 py-2 bg-red-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-red-500 active:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition ease-in-out duration-150']) }}>    {{ $slot }}</button>"
        },
        {
            "type": "View",
            "name": "dialog-modal.blade.php",
            "file": "./resources/views/components/dialog-modal.blade.php",
            "content": "@props(['id' => null, 'maxWidth' => null])<x-modal :id=\"$id\" :maxWidth=\"$maxWidth\" {{ $attributes }}>    <div class=\"px-6 py-4\">        <div class=\"text-lg font-medium text-gray-900 dark:text-gray-100\">            {{ $title }}        </div>        <div class=\"mt-4 text-sm text-gray-600 dark:text-gray-400\">            {{ $content }}        </div>    </div>    <div class=\"flex flex-row justify-end px-6 py-4 bg-gray-100 dark:bg-gray-800 text-end\">        {{ $footer }}    </div></x-modal>"
        },
        {
            "type": "View",
            "name": "dropdown-link.blade.php",
            "file": "./resources/views/components/dropdown-link.blade.php",
            "content": "<a {{ $attributes->merge(['class' => 'block w-full px-4 py-2 text-start text-sm leading-5 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:bg-gray-100 dark:focus:bg-gray-800 transition duration-150 ease-in-out']) }}>{{ $slot }}</a>"
        },
        {
            "type": "View",
            "name": "dropdown.blade.php",
            "file": "./resources/views/components/dropdown.blade.php",
            "content": "@props(['align' => 'right', 'width' => '48', 'contentClasses' => 'py-1 bg-white dark:bg-gray-700', 'dropdownClasses' => ''])@php$alignmentClasses = match ($align) {    'left' => 'ltr:origin-top-left rtl:origin-top-right start-0',    'top' => 'origin-top',    'none', 'false' => '',    default => 'ltr:origin-top-right rtl:origin-top-left end-0',};$width = match ($width) {    '48' => 'w-48',    '60' => 'w-60',    default => 'w-48',};@endphp<div class=\"relative\" x-data=\"{ open: false }\" @click.away=\"open = false\" @close.stop=\"open = false\">    <div @click=\"open = ! open\">        {{ $trigger }}    </div>    <div x-show=\"open\"            x-transition:enter=\"transition ease-out duration-200\"            x-transition:enter-start=\"transform opacity-0 scale-95\"            x-transition:enter-end=\"transform opacity-100 scale-100\"            x-transition:leave=\"transition ease-in duration-75\"            x-transition:leave-start=\"transform opacity-100 scale-100\"            x-transition:leave-end=\"transform opacity-0 scale-95\"            class=\"absolute z-50 mt-2 {{ $width }} rounded-md shadow-lg {{ $alignmentClasses }} {{ $dropdownClasses }}\"            style=\"display: none;\"            @click=\"open = false\">        <div class=\"rounded-md ring-1 ring-black ring-opacity-5 {{ $contentClasses }}\">            {{ $content }}        </div>    </div></div>"
        },
        {
            "type": "View",
            "name": "form-section.blade.php",
            "file": "./resources/views/components/form-section.blade.php",
            "content": "@props(['submit'])<div {{ $attributes->merge(['class' => 'md:grid md:grid-cols-3 md:gap-6']) }}>    <x-section-title>        <x-slot name=\"title\">{{ $title }}</x-slot>        <x-slot name=\"description\">{{ $description }}</x-slot>    </x-section-title>    <div class=\"mt-5 md:mt-0 md:col-span-2\">        <form wire:submit=\"{{ $submit }}\">            <div class=\"px-4 py-5 bg-white dark:bg-gray-800 sm:p-6 shadow {{ isset($actions) ? 'sm:rounded-tl-md sm:rounded-tr-md' : 'sm:rounded-md' }}\">                <div class=\"grid grid-cols-6 gap-6\">                    {{ $form }}                </div>            </div>            @if (isset($actions))                <div class=\"flex items-center justify-end px-4 py-3 bg-gray-50 dark:bg-gray-800 text-end sm:px-6 shadow sm:rounded-bl-md sm:rounded-br-md\">                    {{ $actions }}                </div>            @endif        </form>    </div></div>"
        },
        {
            "type": "View",
            "name": "input-error.blade.php",
            "file": "./resources/views/components/input-error.blade.php",
            "content": "@props(['for'])@error($for)    <p {{ $attributes->merge(['class' => 'text-sm text-red-600 dark:text-red-400']) }}>{{ $message }}</p>@enderror"
        },
        {
            "type": "View",
            "name": "input.blade.php",
            "file": "./resources/views/components/input.blade.php",
            "content": "@props(['disabled' => false])<input {{ $disabled ? 'disabled' : '' }} {!! $attributes->merge(['class' => 'border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 dark:focus:border-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600 rounded-md shadow-sm']) !!}>"
        },
        {
            "type": "View",
            "name": "label.blade.php",
            "file": "./resources/views/components/label.blade.php",
            "content": "@props(['value'])<label {{ $attributes->merge(['class' => 'block font-medium text-sm text-gray-700 dark:text-gray-300']) }}>    {{ $value ?? $slot }}</label>"
        },
        {
            "type": "View",
            "name": "modal.blade.php",
            "file": "./resources/views/components/modal.blade.php",
            "content": "{{-- resources/views/components/modal.blade.php --}}@props(['open' => false, 'maxWidth' => '2xl'])@php    $maxWidthClasses = [        'sm' => 'sm:max-w-sm',        'md' => 'sm:max-w-md',        'lg' => 'sm:max-w-lg',        'xl' => 'sm:max-w-xl',        '2xl' => 'sm:max-w-2xl',    ][$maxWidth];@endphp<div x-data=\"{ open: @js($open) }\" x-show=\"open\" class=\"fixed inset-0 overflow-y-auto px-4 py-6 sm:px-0 z-50\">    <div x-show=\"open\" x-transition:enter=\"ease-out duration-300\" x-transition:enter-start=\"opacity-0\"        x-transition:enter-end=\"opacity-100\" x-transition:leave=\"ease-in duration-200\"        x-transition:leave-start=\"opacity-100\" x-transition:leave-end=\"opacity-0\"        class=\"fixed inset-0 transform transition-all\">        <div class=\"absolute inset-0 bg-gray-500 opacity-75\"></div>    </div>    <div x-show=\"open\" x-transition:enter=\"ease-out duration-300\"        x-transition:enter-start=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"        x-transition:enter-end=\"opacity-100 translate-y-0 sm:scale-100\" x-transition:leave=\"ease-in duration-200\"        x-transition:leave-start=\"opacity-100 translate-y-0 sm:scale-100\"        x-transition:leave-end=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"        class=\"mb-6 bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:w-full {{ $maxWidthClasses }} sm:mx-auto\">        {{ $slot }}    </div></div>"
        },
        {
            "type": "View",
            "name": "nav-link.blade.php",
            "file": "./resources/views/components/nav-link.blade.php",
            "content": "@props(['active'])@php$classes = ($active ?? false)            ? 'inline-flex items-center px-1 pt-1 border-b-2 border-indigo-400 dark:border-indigo-600 text-sm font-medium leading-5 text-gray-900 dark:text-gray-100 focus:outline-none focus:border-indigo-700 transition duration-150 ease-in-out'            : 'inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-700 focus:outline-none focus:text-gray-700 dark:focus:text-gray-300 focus:border-gray-300 dark:focus:border-gray-700 transition duration-150 ease-in-out';@endphp<a {{ $attributes->merge(['class' => $classes]) }}>    {{ $slot }}</a>"
        },
        {
            "type": "View",
            "name": "responsive-nav-link.blade.php",
            "file": "./resources/views/components/responsive-nav-link.blade.php",
            "content": "@props(['active'])@php$classes = ($active ?? false)            ? 'block w-full ps-3 pe-4 py-2 border-l-4 border-indigo-400 dark:border-indigo-600 text-start text-base font-medium text-indigo-700 dark:text-indigo-300 bg-indigo-50 dark:bg-indigo-900/50 focus:outline-none focus:text-indigo-800 dark:focus:text-indigo-200 focus:bg-indigo-100 dark:focus:bg-indigo-900 focus:border-indigo-700 dark:focus:border-indigo-300 transition duration-150 ease-in-out'            : 'block w-full ps-3 pe-4 py-2 border-l-4 border-transparent text-start text-base font-medium text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 hover:border-gray-300 dark:hover:border-gray-600 focus:outline-none focus:text-gray-800 dark:focus:text-gray-200 focus:bg-gray-50 dark:focus:bg-gray-700 focus:border-gray-300 dark:focus:border-gray-600 transition duration-150 ease-in-out';@endphp<a {{ $attributes->merge(['class' => $classes]) }}>    {{ $slot }}</a>"
        },
        {
            "type": "View",
            "name": "secondary-button.blade.php",
            "file": "./resources/views/components/secondary-button.blade.php",
            "content": "<button {{ $attributes->merge(['type' => 'button', 'class' => 'inline-flex items-center px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-500 rounded-md font-semibold text-xs text-gray-700 dark:text-gray-300 uppercase tracking-widest shadow-sm hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-25 transition ease-in-out duration-150']) }}>    {{ $slot }}</button>"
        },
        {
            "type": "View",
            "name": "section-border.blade.php",
            "file": "./resources/views/components/section-border.blade.php",
            "content": "<div class=\"hidden sm:block\">    <div class=\"py-8\">        <div class=\"border-t border-gray-200 dark:border-gray-700\"></div>    </div></div>"
        },
        {
            "type": "View",
            "name": "section-title.blade.php",
            "file": "./resources/views/components/section-title.blade.php",
            "content": "<div class=\"md:col-span-1 flex justify-between\">    <div class=\"px-4 sm:px-0\">        <h3 class=\"text-lg font-medium text-gray-900 dark:text-gray-100\">{{ $title }}</h3>        <p class=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">            {{ $description }}        </p>    </div>    <div class=\"px-4 sm:px-0\">        {{ $aside ?? '' }}    </div></div>"
        },
        {
            "type": "View",
            "name": "switchable-team.blade.php",
            "file": "./resources/views/components/switchable-team.blade.php",
            "content": "@props(['team', 'component' => 'dropdown-link'])<form method=\"POST\" action=\"{{ route('current-team.update') }}\" x-data>    @method('PUT')    @csrf    <!-- Hidden Team ID -->    <input type=\"hidden\" name=\"team_id\" value=\"{{ $team->id }}\">    <x-dynamic-component :component=\"$component\" href=\"#\" x-on:click.prevent=\"$root.submit();\">        <div class=\"flex items-center\">            @if (Auth::user()->isCurrentTeam($team))                <svg class=\"me-2 size-5 text-green-400\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />                </svg>            @endif            <div class=\"truncate\">{{ $team->name }}</div>        </div>    </x-dynamic-component></form>"
        },
        {
            "type": "View",
            "name": "validation-errors.blade.php",
            "file": "./resources/views/components/validation-errors.blade.php",
            "content": "@if ($errors->any())    <div {{ $attributes }}>        <div class=\"font-medium text-red-600 dark:text-red-400\">{{ __('Whoops! Something went wrong.') }}</div>        <ul class=\"mt-3 list-disc list-inside text-sm text-red-600 dark:text-red-400\">            @foreach ($errors->all() as $error)                <li>{{ $error }}</li>            @endforeach        </ul>    </div>@endif"
        },
        {
            "type": "View",
            "name": "layout.blade.php",
            "file": "./resources/views/components/layout.blade.php",
            "content": "<!DOCTYPE html><html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\"><head>    <meta charset=\"utf-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">    <title>{{ config('app.name', 'Laravel') }}</title>    <!-- Fonts -->    <link rel=\"preconnect\" href=\"https://fonts.bunny.net\">    <link href=\"https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap\" rel=\"stylesheet\" />    <!-- Scripts -->    @vite(['resources/css/app.css', 'resources/js/app.js'])    <!-- Styles -->    @livewireStyles</head><body class=\"font-sans antialiased\">    <x-banner />    <div class=\"min-h-screen bg-gray-100 dark:bg-gray-900\">        {{-- @livewire('navigation-menu') --}}        <!-- Page Heading -->        @if (isset($header))            <header class=\"bg-white dark:bg-gray-800 shadow\">                <div class=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">                    {{ $header }}                </div>            </header>        @endif        <!-- Page Content -->        <main>            {{ $slot }}        </main>    </div>    @stack('modals')    @livewireScripts</body></html>"
        },
        {
            "type": "View",
            "name": "badge.blade.php",
            "file": "./resources/views/components/badge.blade.php",
            "content": "{{-- resources/views/components/badge.blade.php --}}@props([    'color' => 'gray',    'size' => 'md',])@php    $colors = [        'gray' => 'bg-gray-100 text-gray-800 border-gray-200',        'red' => 'bg-red-100 text-red-800 border-red-200',        'yellow' => 'bg-yellow-100 text-yellow-800 border-yellow-200',        'green' => 'bg-green-100 text-green-800 border-green-200',        'blue' => 'bg-blue-100 text-blue-800 border-blue-200',        'indigo' => 'bg-indigo-100 text-indigo-800 border-indigo-200',        'purple' => 'bg-purple-100 text-purple-800 border-purple-200',        'pink' => 'bg-pink-100 text-pink-800 border-pink-200',    ];    $sizes = [        'sm' => 'px-2 py-0.5 text-xs border',        'md' => 'px-2.5 py-1 text-sm border',        'lg' => 'px-3 py-1.5 text-base border',    ];    $baseClasses = 'inline-flex items-center font-medium rounded-full border';    $colorClasses = $colors[$color] ?? $colors['gray'];    $sizeClasses = $sizes[$size] ?? $sizes['md'];@endphp<span {{ $attributes->merge(['class' => \"{$baseClasses} {$colorClasses} {$sizeClasses}\"]) }}>    {{ $slot }}</span>"
        },
        {
            "type": "View",
            "name": "checkbox.blade.php",
            "file": "./resources/views/components/form/checkbox.blade.php",
            "content": "<div>    <!-- It is not the man who has too little, but the man who craves more, that is poor. - Seneca --></div>"
        },
        {
            "type": "View",
            "name": "input.blade.php",
            "file": "./resources/views/components/form/input.blade.php",
            "content": "<div>    <!-- Nothing worth having comes easy. - Theodore Roosevelt --></div>"
        },
        {
            "type": "View",
            "name": "select.blade.php",
            "file": "./resources/views/components/form/select.blade.php",
            "content": "<div>    <!-- If you do not have a consistent goal in life, you can not live it in a consistent way. - Marcus Aurelius --></div>"
        },
        {
            "type": "View",
            "name": "textarea.blade.php",
            "file": "./resources/views/components/form/textarea.blade.php",
            "content": "<div>    <!-- An unexamined life is not worth living. - Socrates --></div>"
        },
        {
            "type": "View",
            "name": "sort-indicator.blade.php",
            "file": "./resources/views/components/sort-indicator.blade.php",
            "content": "<div>    <!-- I have not failed. I've just found 10,000 ways that won't work. - Thomas Edison --></div>"
        },
        {
            "type": "View",
            "name": "table.blade.php",
            "file": "./resources/views/components/table.blade.php",
            "content": "<div>    <!-- Simplicity is the ultimate sophistication. - Leonardo da Vinci --></div>"
        },
        {
            "type": "View",
            "name": "button.blade.php",
            "file": "./resources/views/components/button.blade.php",
            "content": "{{-- resources/views/components/button.blade.php --}}@props([    'variant' => 'primary',    'size' => 'md',    'type' => 'button',])@php    $baseClasses =        'inline-flex items-center justify-center rounded-md font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';    $variants = [        'primary' => 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',        'secondary' => 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500',        'danger' => 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',        'outline' => 'border border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-gray-500',        'ghost' => 'text-gray-700 hover:bg-gray-100 focus:ring-gray-500',    ];    $sizes = [        'sm' => 'px-3 py-1.5 text-sm',        'md' => 'px-4 py-2 text-sm',        'lg' => 'px-6 py-3 text-base',    ];    $classes = $baseClasses . ' ' . $variants[$variant] . ' ' . $sizes[$size];@endphp<button type=\"{{ $type }}\" {{ $attributes->merge(['class' => $classes]) }}>    {{ $slot }}</button>"
        },
        {
            "type": "View",
            "name": "primary.blade.php",
            "file": "./resources/views/components/button/primary.blade.php",
            "content": "{{-- resources/views/components/button/secondary.blade.php --}}@props(['size' => 'md', 'type' => 'button'])<x-button :variant=\"'primary'\" :size=\"$size\" :type=\"$type\" {{ $attributes }}>    {{ $slot }}</x-button>"
        },
        {
            "type": "View",
            "name": "secondary.blade.php",
            "file": "./resources/views/components/button/secondary.blade.php",
            "content": "{{-- resources/views/components/button/secondary.blade.php --}}@props(['size' => 'md', 'type' => 'button'])<x-button :variant=\"'secondary'\" :size=\"$size\" :type=\"$type\" {{ $attributes }}>    {{ $slot }}</x-button>"
        },
        {
            "type": "View",
            "name": "danger.blade.php",
            "file": "./resources/views/components/button/danger.blade.php",
            "content": "{{-- resources/views/components/button/danger.blade.php --}}@props(['size' => 'md', 'type' => 'button'])<x-button :variant=\"'danger'\" :size=\"$size\" :type=\"$type\" {{ $attributes }}>    {{ $slot }}</x-button>"
        },
        {
            "type": "View",
            "name": "outline.blade.php",
            "file": "./resources/views/components/button/outline.blade.php",
            "content": "{{-- resources/views/components/button/outline.blade.php --}}@props(['size' => 'md', 'type' => 'button'])<x-button :variant=\"'outline'\" :size=\"$size\" :type=\"$type\" {{ $attributes }}>    {{ $slot }}</x-button>"
        },
        {
            "type": "View",
            "name": "ghost.blade.php",
            "file": "./resources/views/components/button/ghost.blade.php",
            "content": "{{-- resources/views/components/button/ghost.blade.php --}}@props(['size' => 'md', 'type' => 'button'])<x-button :variant=\"'ghost'\" :size=\"$size\" :type=\"$type\" {{ $attributes }}>    {{ $slot }}</x-button>"
        },
        {
            "type": "View",
            "name": "link.blade.php",
            "file": "./resources/views/components/button/link.blade.php",
            "content": "{{-- resources/views/components/button/link.blade.php --}}@props(['variant' => 'primary', 'size' => 'md', 'href' => '#'])@php    $baseClasses =        'inline-flex items-center justify-center rounded-md font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';    $variants = [        'primary' => 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',        'secondary' => 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500',        'danger' => 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',        'outline' => 'border border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-gray-500',        'ghost' => 'text-gray-700 hover:bg-gray-100 focus:ring-gray-500',    ];    $sizes = [        'sm' => 'px-3 py-1.5 text-sm',        'md' => 'px-4 py-2 text-sm',        'lg' => 'px-6 py-3 text-base',    ];    $classes = $baseClasses . ' ' . $variants[$variant] . ' ' . $sizes[$size];@endphp<a href=\"{{ $href }}\" {{ $attributes->merge(['class' => $classes]) }}>    {{ $slot }}</a>"
        },
        {
            "type": "View",
            "name": "textarea.blade.php",
            "file": "./resources/views/components/textarea.blade.php",
            "content": "<div>    Order your soul. Reduce your wants. - Augustine</div>"
        },
        {
            "type": "View",
            "name": "select.blade.php",
            "file": "./resources/views/components/select.blade.php",
            "content": "<div>    Nothing in life is to be feared, it is only to be understood. Now is the time to understand more, so that we may    fear less. - Marie Curie</div>"
        },
        {
            "type": "View",
            "name": "card.blade.php",
            "file": "./resources/views/components/card.blade.php",
            "content": "// resources/views/components/company/card.blade.php<div class=\"bg-white rounded-lg shadow-md p-6\">    <div class=\"flex items-center justify-between\">        <h3 class=\"text-lg font-semibold text-gray-900\">{{ $company->name }}</h3>        <x-badge :color=\"$company->is_active ? 'green' : 'gray'\">            {{ $company->is_active ? 'Active' : 'Inactive' }}        </x-badge>    </div>    <p class=\"mt-2 text-gray-600\">{{ $company->description }}</p>    <div class=\"mt-4 flex space-x-2\">        <x-button.link :href=\"route('organizations.show', $company)\">View</x-button.link>        <x-button.link :href=\"route('organizations.edit', $company)\" variant=\"outline\">Edit</x-button.link>    </div></div>"
        },
        {
            "type": "View",
            "name": "notification-system.blade.php",
            "file": "./resources/views/components/notification-system.blade.php",
            "content": "@props(['position' => 'top-right']) <!-- top-right, top-left, bottom-right, bottom-left --><div x-data=\"{    notifications: [],    addNotification(type, message) {        const id = Date.now() + Math.random();        this.notifications.push({ id, type, message });        setTimeout(() => this.removeNotification(id), 5000);    },    removeNotification(id) {        this.notifications = this.notifications.filter(n => n.id !== id);    }}\" @notify.window=\"addNotification($event.detail.type, $event.detail.message)\"    class=\"fixed z-50 {{ $position === 'top-right'        ? 'top-4 right-4'        : ($position === 'top-left'            ? 'top-4 left-4'            : ($position === 'bottom-right'                ? 'bottom-4 right-4'                : 'bottom-4 left-4')) }} space-y-2\">    <template x-for=\"notification in notifications\" :key=\"notification.id\">        <div x-transition:enter=\"transition ease-out duration-300\"            x-transition:enter-start=\"opacity-0 transform translate-y-2\"            x-transition:enter-end=\"opacity-100 transform translate-y-0\"            x-transition:leave=\"transition ease-in duration-200\"            x-transition:leave-start=\"opacity-100 transform translate-y-0\"            x-transition:leave-end=\"opacity-0 transform translate-y-2\"            :class=\"{                'bg-green-500': notification.type === 'success',                'bg-red-500': notification.type === 'error',                'bg-blue-500': notification.type === 'info',                'bg-yellow-500': notification.type === 'warning'            }\"            class=\"text-white px-6 py-3 rounded-lg shadow-lg cursor-pointer min-w-64\"            @click=\"removeNotification(notification.id)\">            <div class=\"flex items-center justify-between\">                <p x-text=\"notification.message\" class=\"text-sm font-medium\"></p>                <button @click=\"removeNotification(notification.id)\" class=\"ml-4 hover:opacity-75\">                    <svg class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"                            d=\"M6 18L18 6M6 6l12 12\" />                    </svg>                </button>            </div>        </div>    </template></div>"
        },
        {
            "type": "View",
            "name": "loading-spinner.blade.php",
            "file": "./resources/views/components/loading-spinner.blade.php",
            "content": "@props([    'size' => 'medium', // small, medium, large    'color' => 'currentColor',    'text' => null,])@php    $sizes = [        'small' => 'h-4 w-4',        'medium' => 'h-5 w-5',        'large' => 'h-8 w-8',    ];@endphp<div class=\"inline-flex items-center space-x-2\">    <svg class=\"animate-spin {{ $sizes[$size] }} text-{{ $color }}\" xmlns=\"http://www.w3.org/2000/svg\"        fill=\"none\" viewBox=\"0 0 24 24\">        <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>        <path class=\"opacity-75\" fill=\"currentColor\"            d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\">        </path>    </svg>    @if ($text)        <span class=\"text-sm text-gray-600\">{{ $text }}</span>    @endif</div>"
        },
        {
            "type": "View",
            "name": "status-badge.blade.php",
            "file": "./resources/views/components/status-badge.blade.php",
            "content": "@props([    'status' => 'idle', // idle, loading, success, error, warning    'text' => null,])@php    $statusConfig = [        'idle' => ['bg-gray-200', 'text-gray-800', 'Ready'],        'loading' => ['bg-blue-200', 'text-blue-800', 'Loading...'],        'success' => ['bg-green-200', 'text-green-800', 'Success'],        'error' => ['bg-red-200', 'text-red-800', 'Error'],        'warning' => ['bg-yellow-200', 'text-yellow-800', 'Warning'],    ];    [$bgColor, $textColor, $defaultText] = $statusConfig[$status] ?? $statusConfig['idle'];    $displayText = $text ?? $defaultText;@endphp<span {{ $attributes->merge(['class' => \"px-3 py-1 rounded-full text-sm font-medium {$bgColor} {$textColor}\"]) }}>    {{ $displayText }}</span>"
        },
        {
            "type": "View",
            "name": "empty-state.blade.php",
            "file": "./resources/views/components/empty-state.blade.php",
            "content": "@props([    'icon' => 'document',    'title' => 'No data found',    'description' => 'There are no items to display at this time.',    'action' => null,    'actionText' => 'Create New',])@php    $icons = [        'document' =>            '<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />',        'user' =>            '<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />',        'chart' =>            '<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />',        'search' =>            '<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />',    ];@endphp<div {{ $attributes->merge(['class' => 'bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center']) }}>    <svg class=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">        {!! $icons[$icon] ?? $icons['document'] !!}    </svg>    <h3 class=\"mt-4 text-lg font-medium text-gray-900\">{{ $title }}</h3>    <p class=\"mt-2 text-gray-500\">{{ $description }}</p>    @if ($action)        <div class=\"mt-6\">            <button wire:click=\"{{ $action }}\"                class=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors\">                {{ $actionText }}            </button>        </div>    @endif</div>"
        },
        {
            "type": "View",
            "name": "data-table.blade.php",
            "file": "./resources/views/components/data-table.blade.php",
            "content": "@props([    'headers' => [],    'data' => [],    'emptyMessage' => 'No data found',    'loading' => false,    'rowClick' => null,])<div class=\"bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden\">    @if ($loading)        <div class=\"p-6 space-y-4 animate-pulse\">            <div class=\"h-6 bg-gray-200 rounded w-1/4\"></div>            <div class=\"space-y-3\">                @foreach (range(1, 5) as $i)                    <div class=\"h-4 bg-gray-200 rounded {{ $i % 2 ? 'w-5/6' : 'w-4/6' }}\"></div>                @endforeach            </div>        </div>    @elseif(empty($data))        <x-empty-state title=\"No data available\" :description=\"$emptyMessage\" icon=\"document\" />    @else        <div class=\"overflow-x-auto\">            <table class=\"min-w-full divide-y divide-gray-200\">                <thead class=\"bg-gray-50\">                    <tr>                        @foreach ($headers as $header)                            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">                                {{ $header }}                            </th>                        @endforeach                    </tr>                </thead>                <tbody class=\"bg-white divide-y divide-gray-200\">                    {{ $slot }}                </tbody>            </table>        </div>    @endif</div>"
        },
        {
            "type": "View",
            "name": "welcome.blade.php",
            "file": "./resources/views/components/welcome.blade.php",
            "content": "<div    class=\"bg-gray-100 dark:bg-gray-900 font-sans antialiased text-gray-900 dark:text-gray-100 min-h-screen flex flex-col justify-center items-center py-12 px-4 sm:px-6 lg:px-8\">    <!-- Hero Section -->    <div class=\"relative w-full max-w-4xl mx-auto text-center mb-16\">        <h1 class=\"text-4xl sm:text-5xl lg:text-6xl font-extrabold tracking-tight leading-tight\"><span class=\"block\">The                Platform Your Business</span><span class=\"block text-indigo-600 dark:text-indigo-400 mt-2\">Has Been                Waiting For</span></h1>        <p class=\"mt-6 text-lg sm:text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto\">Simplify your workflow,            boost productivity, and drive growth with our all-in-one SaaS solution.</p>        <div class=\"mt-8 flex justify-center space-x-4\"><a href=\"#\"                class=\"inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-full shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors\">Get                Started Free</a><a href=\"#\"                class=\"inline-flex items-center px-6 py-3 border border-gray-300 text-base font-medium rounded-full text-indigo-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:bg-gray-800 dark:text-indigo-300 dark:hover:bg-gray-700 dark:border-gray-600 transition-colors\">Learn                More</a></div>    </div><!-- Features Section -->    <div        class=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-6 md:p-12 w-full max-w-6xl mx-auto border border-gray-200 dark:border-gray-700\">        <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8\">            <!-- Feature Card 1 -->            <div class=\"flex flex-col items-center text-center p-4\">                <div class=\"flex-shrink-0 mb-4 bg-indigo-50 dark:bg-indigo-900 p-3 rounded-full\">                    <svg class=\"h-8 w-8 text-indigo-600 dark:text-indigo-400\" xmlns=\"http://www.w3.org/2000/svg\"                        fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"                            d=\"M17 20h-10a4 4 0 01-4-4V8a4 4 0 014-4h10a4 4 0 014 4v8a4 4 0 01-4 4z\" />                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4v16M4 12h16\" />                    </svg>                </div>                <h3 class=\"text-xl font-semibold mb-2\">Intuitive Dashboards</h3>                <p class=\"text-gray-600 dark:text-gray-400 text-sm\">                    Gain a clear, real-time overview of your business performance with powerful, customizable                    dashboards.                </p>            </div>            <!-- Feature Card 2 -->            <div class=\"flex flex-col items-center text-center p-4\">                <div class=\"flex-shrink-0 mb-4 bg-purple-50 dark:bg-purple-900 p-3 rounded-full\">                    <svg class=\"h-8 w-8 text-purple-600 dark:text-purple-400\" xmlns=\"http://www.w3.org/2000/svg\"                        fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"                            d=\"M12 8c1.657 0 3 1.343 3 3s-1.343 3-3 3s-3-1.343-3-3s1.343-3 3-3zm0 0v1.5a1.5 1.5 0 01-1.5 1.5h-3a1.5 1.5 0 01-1.5-1.5V8a1.5 1.5 0 011.5-1.5h3A1.5 1.5 0 0112 8z\" />                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"                            d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />                    </svg>                </div>                <h3 class=\"text-xl font-semibold mb-2\">Seamless Collaboration</h3>                <p class=\"text-gray-600 dark:text-gray-400 text-sm\">                    Collaborate with your team in real-time on projects, share files, and communicate effortlessly.                </p>            </div>            <!-- Feature Card 3 -->            <div class=\"flex flex-col items-center text-center p-4\">                <div class=\"flex-shrink-0 mb-4 bg-green-50 dark:bg-green-900 p-3 rounded-full\">                    <svg class=\"h-8 w-8 text-green-600 dark:text-green-400\" xmlns=\"http://www.w3.org/2000/svg\"                        fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"                            d=\"M9 12h6m-3-3v6m-2 4h4a2 2 0 002-2V6a2 2 0 00-2-2H9a2 2 0 00-2 2v10a2 2 0 002 2z\" />                    </svg>                </div>                <h3 class=\"text-xl font-semibold mb-2\">Efficient Project Management</h3>                <p class=\"text-gray-600 dark:text-gray-400 text-sm\">                    Plan, track, and execute your projects from start to finish with our robust project manag"
        },
        {
            "type": "View",
            "name": "guest.blade.php",
            "file": "./resources/views/layouts/guest.blade.php",
            "content": "<!DOCTYPE html><html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">    <head>        <meta charset=\"utf-8\">        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">        <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">        <title>{{ config('app.name', 'Laravel') }}</title>        <!-- Fonts -->        <link rel=\"preconnect\" href=\"https://fonts.bunny.net\">        <link href=\"https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap\" rel=\"stylesheet\" />        <!-- Scripts -->        @vite(['resources/css/app.css', 'resources/js/app.js'])        <!-- Styles -->        @livewireStyles    </head>    <body>        <div class=\"font-sans text-gray-900 dark:text-gray-100 antialiased\">            {{ $slot }}        </div>        @livewireScripts    </body></html>"
        },
        {
            "type": "View",
            "name": "app.blade.php",
            "file": "./resources/views/layouts/app.blade.php",
            "content": "<!DOCTYPE html><html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">    <head>        <meta charset=\"utf-8\">        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">        <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">        <title>{{ config('app.name', 'Laravel') }}</title>        <!-- Fonts -->        <link rel=\"preconnect\" href=\"https://fonts.bunny.net\">        <link href=\"https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap\" rel=\"stylesheet\" />        <!-- Scripts -->        @vite(['resources/css/app.css', 'resources/js/app.js'])        <!-- Styles -->        @livewireStyles    </head>    <body class=\"font-sans antialiased\">        <x-banner />        <div class=\"min-h-screen bg-gray-100 dark:bg-gray-900\">            @livewire('navigation-menu')            <!-- Page Heading -->            @if (isset($header))                <header class=\"bg-white dark:bg-gray-800 shadow\">                    <div class=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">                        {{ $header }}                    </div>                </header>            @endif            <!-- Page Content -->            <main>                {{ $slot }}            </main>        </div>        @stack('modals')        @livewireScripts    </body></html>"
        },
        {
            "type": "View",
            "name": "delete-user-form.blade.php",
            "file": "./resources/views/profile/delete-user-form.blade.php",
            "content": "<x-action-section>    <x-slot name=\"title\">        {{ __('Delete Account') }}    </x-slot>    <x-slot name=\"description\">        {{ __('Permanently delete your account.') }}    </x-slot>    <x-slot name=\"content\">        <div class=\"max-w-xl text-sm text-gray-600 dark:text-gray-400\">            {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Before deleting your account, please download any data or information that you wish to retain.') }}        </div>        <div class=\"mt-5\">            <x-danger-button wire:click=\"confirmUserDeletion\" wire:loading.attr=\"disabled\">                {{ __('Delete Account') }}            </x-danger-button>        </div>        <!-- Delete User Confirmation Modal -->        <x-dialog-modal wire:model.live=\"confirmingUserDeletion\">            <x-slot name=\"title\">                {{ __('Delete Account') }}            </x-slot>            <x-slot name=\"content\">                {{ __('Are you sure you want to delete your account? Once your account is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your account.') }}                <div class=\"mt-4\" x-data=\"{}\" x-on:confirming-delete-user.window=\"setTimeout(() => $refs.password.focus(), 250)\">                    <x-input type=\"password\" class=\"mt-1 block w-3/4\"                                autocomplete=\"current-password\"                                placeholder=\"{{ __('Password') }}\"                                x-ref=\"password\"                                wire:model=\"password\"                                wire:keydown.enter=\"deleteUser\" />                    <x-input-error for=\"password\" class=\"mt-2\" />                </div>            </x-slot>            <x-slot name=\"footer\">                <x-secondary-button wire:click=\"$toggle('confirmingUserDeletion')\" wire:loading.attr=\"disabled\">                    {{ __('Cancel') }}                </x-secondary-button>                <x-danger-button class=\"ms-3\" wire:click=\"deleteUser\" wire:loading.attr=\"disabled\">                    {{ __('Delete Account') }}                </x-danger-button>            </x-slot>        </x-dialog-modal>    </x-slot></x-action-section>"
        },
        {
            "type": "View",
            "name": "logout-other-browser-sessions-form.blade.php",
            "file": "./resources/views/profile/logout-other-browser-sessions-form.blade.php",
            "content": "<x-action-section>    <x-slot name=\"title\">        {{ __('Browser Sessions') }}    </x-slot>    <x-slot name=\"description\">        {{ __('Manage and log out your active sessions on other browsers and devices.') }}    </x-slot>    <x-slot name=\"content\">        <div class=\"max-w-xl text-sm text-gray-600 dark:text-gray-400\">            {{ __('If necessary, you may log out of all of your other browser sessions across all of your devices. Some of your recent sessions are listed below; however, this list may not be exhaustive. If you feel your account has been compromised, you should also update your password.') }}        </div>        @if (count($this->sessions) > 0)            <div class=\"mt-5 space-y-6\">                <!-- Other Browser Sessions -->                @foreach ($this->sessions as $session)                    <div class=\"flex items-center\">                        <div>                            @if ($session->agent->isDesktop())                                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-8 text-gray-500\">                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 17.25v1.007a3 3 0 01-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0115 18.257V17.25m6-12V15a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 15V5.25m18 0A2.25 2.25 0 0018.75 3H5.25A2.25 2.25 0 003 5.25m18 0V12a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 12V5.25\" />                                </svg>                            @else                                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-8 text-gray-500\">                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M10.5 1.5H8.25A2.25 2.25 0 006 3.75v16.5a2.25 2.25 0 002.25 2.25h7.5A2.25 2.25 0 0018 20.25V3.75a2.25 2.25 0 00-2.25-2.25H13.5m-3 0V3h3V1.5m-3 0h3m-3 18.75h3\" />                                </svg>                            @endif                        </div>                        <div class=\"ms-3\">                            <div class=\"text-sm text-gray-600 dark:text-gray-400\">                                {{ $session->agent->platform() ? $session->agent->platform() : __('Unknown') }} - {{ $session->agent->browser() ? $session->agent->browser() : __('Unknown') }}                            </div>                            <div>                                <div class=\"text-xs text-gray-500\">                                    {{ $session->ip_address }},                                    @if ($session->is_current_device)                                        <span class=\"text-green-500 font-semibold\">{{ __('This device') }}</span>                                    @else                                        {{ __('Last active') }} {{ $session->last_active }}                                    @endif                                </div>                            </div>                        </div>                    </div>                @endforeach            </div>        @endif        <div class=\"flex items-center mt-5\">            <x-button wire:click=\"confirmLogout\" wire:loading.attr=\"disabled\">                {{ __('Log Out Other Browser Sessions') }}            </x-button>            <x-action-message class=\"ms-3\" on=\"loggedOut\">                {{ __('Done.') }}            </x-action-message>        </div>        <!-- Log Out Other Devices Confirmation Modal -->        <x-dialog-modal wire:model.live=\"confirmingLogout\">            <x-slot name=\"title\">                {{ __('Log Out Other Browser Sessions') }}            </x-slot>            <x-slot name=\"content\">                {{ __('Please enter your password to confirm you would like to log out of your other browser sessions across all of your devices.') }}                <div class=\"mt-4\" x-data=\"{}\" x-on:confirming-logout-other-browser-sessions.window=\"setTimeout(() => $refs.password.focus(), 250)\">                    <x-input type=\"password\" class=\"mt-1 block w-3/4\"                                autocomplete=\"current-password\"                                placeholder=\"{{ __('Password') }}\"                                x-ref=\"password\"                                wire:model=\"password\"                                wire:keydown.enter=\"logoutOtherBrowserSessions\" />                    <x-input-error for=\"password\" class=\"mt-2\" />                </div>            </x-slot>            <x-slot name=\"footer\">                <x-secondary-button wire:click=\"$toggle('confirmingLogout')\" wire:loading.attr=\"disabled\">                    {{ __('Cancel') }}                </x-secondary-button>                <x-button class=\"ms-3\"                            wire:click=\"logoutOtherBrowserSessions\"                            wire:loading.attr=\"disabled\">         "
        },
        {
            "type": "View",
            "name": "show.blade.php",
            "file": "./resources/views/profile/show.blade.php",
            "content": "<x-app-layout>    <x-slot name=\"header\">        <h2 class=\"font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight\">            {{ __('Profile') }}        </h2>    </x-slot>    <div>        <div class=\"max-w-7xl mx-auto py-10 sm:px-6 lg:px-8\">            @if (Laravel\\Fortify\\Features::canUpdateProfileInformation())                @livewire('profile.update-profile-information-form')                <x-section-border />            @endif            @if (Laravel\\Fortify\\Features::enabled(Laravel\\Fortify\\Features::updatePasswords()))                <div class=\"mt-10 sm:mt-0\">                    @livewire('profile.update-password-form')                </div>                <x-section-border />            @endif            @if (Laravel\\Fortify\\Features::canManageTwoFactorAuthentication())                <div class=\"mt-10 sm:mt-0\">                    @livewire('profile.two-factor-authentication-form')                </div>                <x-section-border />            @endif            <div class=\"mt-10 sm:mt-0\">                @livewire('profile.logout-other-browser-sessions-form')            </div>            @if (Laravel\\Jetstream\\Jetstream::hasAccountDeletionFeatures())                <x-section-border />                <div class=\"mt-10 sm:mt-0\">                    @livewire('profile.delete-user-form')                </div>            @endif        </div>    </div></x-app-layout>"
        },
        {
            "type": "View",
            "name": "two-factor-authentication-form.blade.php",
            "file": "./resources/views/profile/two-factor-authentication-form.blade.php",
            "content": "<x-action-section>    <x-slot name=\"title\">        {{ __('Two Factor Authentication') }}    </x-slot>    <x-slot name=\"description\">        {{ __('Add additional security to your account using two factor authentication.') }}    </x-slot>    <x-slot name=\"content\">        <h3 class=\"text-lg font-medium text-gray-900 dark:text-gray-100\">            @if ($this->enabled)                @if ($showingConfirmation)                    {{ __('Finish enabling two factor authentication.') }}                @else                    {{ __('You have enabled two factor authentication.') }}                @endif            @else                {{ __('You have not enabled two factor authentication.') }}            @endif        </h3>        <div class=\"mt-3 max-w-xl text-sm text-gray-600 dark:text-gray-400\">            <p>                {{ __('When two factor authentication is enabled, you will be prompted for a secure, random token during authentication. You may retrieve this token from your phone\\'s Google Authenticator application.') }}            </p>        </div>        @if ($this->enabled)            @if ($showingQrCode)                <div class=\"mt-4 max-w-xl text-sm text-gray-600 dark:text-gray-400\">                    <p class=\"font-semibold\">                        @if ($showingConfirmation)                            {{ __('To finish enabling two factor authentication, scan the following QR code using your phone\\'s authenticator application or enter the setup key and provide the generated OTP code.') }}                        @else                            {{ __('Two factor authentication is now enabled. Scan the following QR code using your phone\\'s authenticator application or enter the setup key.') }}                        @endif                    </p>                </div>                <div class=\"mt-4 p-2 inline-block bg-white\">                    {!! $this->user->twoFactorQrCodeSvg() !!}                </div>                <div class=\"mt-4 max-w-xl text-sm text-gray-600 dark:text-gray-400\">                    <p class=\"font-semibold\">                        {{ __('Setup Key') }}: {{ decrypt($this->user->two_factor_secret) }}                    </p>                </div>                @if ($showingConfirmation)                    <div class=\"mt-4\">                        <x-label for=\"code\" value=\"{{ __('Code') }}\" />                        <x-input id=\"code\" type=\"text\" name=\"code\" class=\"block mt-1 w-1/2\" inputmode=\"numeric\" autofocus autocomplete=\"one-time-code\"                            wire:model=\"code\"                            wire:keydown.enter=\"confirmTwoFactorAuthentication\" />                        <x-input-error for=\"code\" class=\"mt-2\" />                    </div>                @endif            @endif            @if ($showingRecoveryCodes)                <div class=\"mt-4 max-w-xl text-sm text-gray-600 dark:text-gray-400\">                    <p class=\"font-semibold\">                        {{ __('Store these recovery codes in a secure password manager. They can be used to recover access to your account if your two factor authentication device is lost.') }}                    </p>                </div>                <div class=\"grid gap-1 max-w-xl mt-4 px-4 py-4 font-mono text-sm bg-gray-100 dark:bg-gray-900 dark:text-gray-100 rounded-lg\">                    @foreach (json_decode(decrypt($this->user->two_factor_recovery_codes), true) as $code)                        <div>{{ $code }}</div>                    @endforeach                </div>            @endif        @endif        <div class=\"mt-5\">            @if (! $this->enabled)                <x-confirms-password wire:then=\"enableTwoFactorAuthentication\">                    <x-button type=\"button\" wire:loading.attr=\"disabled\">                        {{ __('Enable') }}                    </x-button>                </x-confirms-password>            @else                @if ($showingRecoveryCodes)                    <x-confirms-password wire:then=\"regenerateRecoveryCodes\">                        <x-secondary-button class=\"me-3\">                            {{ __('Regenerate Recovery Codes') }}                        </x-secondary-button>                    </x-confirms-password>                @elseif ($showingConfirmation)                    <x-confirms-password wire:then=\"confirmTwoFactorAuthentication\">                        <x-button type=\"button\" class=\"me-3\" wire:loading.attr=\"disabled\">                            {{ __('Confirm') }}                        </x-button>                    </x-confirms-password>                @else                    <x-confirms-password wire:then=\"showRecoveryCodes\">                        <x-secondary-button class=\"me-3\">                            {{ __('Show Recovery Codes') }}                        </x-secondary-button>                    </x-confirms-password>                @endif  "
        },
        {
            "type": "View",
            "name": "update-password-form.blade.php",
            "file": "./resources/views/profile/update-password-form.blade.php",
            "content": "<x-form-section submit=\"updatePassword\">    <x-slot name=\"title\">        {{ __('Update Password') }}    </x-slot>    <x-slot name=\"description\">        {{ __('Ensure your account is using a long, random password to stay secure.') }}    </x-slot>    <x-slot name=\"form\">        <div class=\"col-span-6 sm:col-span-4\">            <x-label for=\"current_password\" value=\"{{ __('Current Password') }}\" />            <x-input id=\"current_password\" type=\"password\" class=\"mt-1 block w-full\" wire:model=\"state.current_password\" autocomplete=\"current-password\" />            <x-input-error for=\"current_password\" class=\"mt-2\" />        </div>        <div class=\"col-span-6 sm:col-span-4\">            <x-label for=\"password\" value=\"{{ __('New Password') }}\" />            <x-input id=\"password\" type=\"password\" class=\"mt-1 block w-full\" wire:model=\"state.password\" autocomplete=\"new-password\" />            <x-input-error for=\"password\" class=\"mt-2\" />        </div>        <div class=\"col-span-6 sm:col-span-4\">            <x-label for=\"password_confirmation\" value=\"{{ __('Confirm Password') }}\" />            <x-input id=\"password_confirmation\" type=\"password\" class=\"mt-1 block w-full\" wire:model=\"state.password_confirmation\" autocomplete=\"new-password\" />            <x-input-error for=\"password_confirmation\" class=\"mt-2\" />        </div>    </x-slot>    <x-slot name=\"actions\">        <x-action-message class=\"me-3\" on=\"saved\">            {{ __('Saved.') }}        </x-action-message>        <x-button>            {{ __('Save') }}        </x-button>    </x-slot></x-form-section>"
        },
        {
            "type": "View",
            "name": "update-profile-information-form.blade.php",
            "file": "./resources/views/profile/update-profile-information-form.blade.php",
            "content": "<x-form-section submit=\"updateProfileInformation\">    <x-slot name=\"title\">        {{ __('Profile Information') }}    </x-slot>    <x-slot name=\"description\">        {{ __('Update your account\\'s profile information and email address.') }}    </x-slot>    <x-slot name=\"form\">        <!-- Profile Photo -->        @if (Laravel\\Jetstream\\Jetstream::managesProfilePhotos())            <div x-data=\"{photoName: null, photoPreview: null}\" class=\"col-span-6 sm:col-span-4\">                <!-- Profile Photo File Input -->                <input type=\"file\" id=\"photo\" class=\"hidden\"                            wire:model.live=\"photo\"                            x-ref=\"photo\"                            x-on:change=\"                                    photoName = $refs.photo.files[0].name;                                    const reader = new FileReader();                                    reader.onload = (e) => {                                        photoPreview = e.target.result;                                    };                                    reader.readAsDataURL($refs.photo.files[0]);                            \" />                <x-label for=\"photo\" value=\"{{ __('Photo') }}\" />                <!-- Current Profile Photo -->                <div class=\"mt-2\" x-show=\"! photoPreview\">                    <img src=\"{{ $this->user->profile_photo_url }}\" alt=\"{{ $this->user->name }}\" class=\"rounded-full size-20 object-cover\">                </div>                <!-- New Profile Photo Preview -->                <div class=\"mt-2\" x-show=\"photoPreview\" style=\"display: none;\">                    <span class=\"block rounded-full size-20 bg-cover bg-no-repeat bg-center\"                          x-bind:style=\"'background-image: url(\\'' + photoPreview + '\\');'\">                    </span>                </div>                <x-secondary-button class=\"mt-2 me-2\" type=\"button\" x-on:click.prevent=\"$refs.photo.click()\">                    {{ __('Select A New Photo') }}                </x-secondary-button>                @if ($this->user->profile_photo_path)                    <x-secondary-button type=\"button\" class=\"mt-2\" wire:click=\"deleteProfilePhoto\">                        {{ __('Remove Photo') }}                    </x-secondary-button>                @endif                <x-input-error for=\"photo\" class=\"mt-2\" />            </div>        @endif        <!-- Name -->        <div class=\"col-span-6 sm:col-span-4\">            <x-label for=\"name\" value=\"{{ __('Name') }}\" />            <x-input id=\"name\" type=\"text\" class=\"mt-1 block w-full\" wire:model=\"state.name\" required autocomplete=\"name\" />            <x-input-error for=\"name\" class=\"mt-2\" />        </div>        <!-- Email -->        <div class=\"col-span-6 sm:col-span-4\">            <x-label for=\"email\" value=\"{{ __('Email') }}\" />            <x-input id=\"email\" type=\"email\" class=\"mt-1 block w-full\" wire:model=\"state.email\" required autocomplete=\"username\" />            <x-input-error for=\"email\" class=\"mt-2\" />            @if (Laravel\\Fortify\\Features::enabled(Laravel\\Fortify\\Features::emailVerification()) && ! $this->user->hasVerifiedEmail())                <p class=\"text-sm mt-2 dark:text-white\">                    {{ __('Your email address is unverified.') }}                    <button type=\"button\" class=\"underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800\" wire:click.prevent=\"sendEmailVerification\">                        {{ __('Click here to re-send the verification email.') }}                    </button>                </p>                @if ($this->verificationLinkSent)                    <p class=\"mt-2 font-medium text-sm text-green-600 dark:text-green-400\">                        {{ __('A new verification link has been sent to your email address.') }}                    </p>                @endif            @endif        </div>    </x-slot>    <x-slot name=\"actions\">        <x-action-message class=\"me-3\" on=\"saved\">            {{ __('Saved.') }}        </x-action-message>        <x-button wire:loading.attr=\"disabled\" wire:target=\"photo\">            {{ __('Save') }}        </x-button>    </x-slot></x-form-section>"
        },
        {
            "type": "View",
            "name": "terms.blade.php",
            "file": "./resources/views/terms.blade.php",
            "content": "<x-guest-layout>    <div class=\"pt-4 bg-gray-100 dark:bg-gray-900\">        <div class=\"min-h-screen flex flex-col items-center pt-6 sm:pt-0\">            <div>                <x-authentication-card-logo />            </div>            <div class=\"w-full sm:max-w-2xl mt-6 p-6 bg-white dark:bg-gray-800 shadow-md overflow-hidden sm:rounded-lg prose dark:prose-invert\">                {!! $terms !!}            </div>        </div>    </div></x-guest-layout>"
        },
        {
            "type": "View",
            "name": "policy.blade.php",
            "file": "./resources/views/policy.blade.php",
            "content": "<x-guest-layout>    <div class=\"pt-4 bg-gray-100 dark:bg-gray-900\">        <div class=\"min-h-screen flex flex-col items-center pt-6 sm:pt-0\">            <div>                <x-authentication-card-logo />            </div>            <div class=\"w-full sm:max-w-2xl mt-6 p-6 bg-white dark:bg-gray-800 shadow-md overflow-hidden sm:rounded-lg prose dark:prose-invert\">                {!! $policy !!}            </div>        </div>    </div></x-guest-layout>"
        },
        {
            "type": "View",
            "name": "create-team-form.blade.php",
            "file": "./resources/views/teams/create-team-form.blade.php",
            "content": "<x-form-section submit=\"createTeam\">    <x-slot name=\"title\">        {{ __('Team Details') }}    </x-slot>    <x-slot name=\"description\">        {{ __('Create a new team to collaborate with others on projects.') }}    </x-slot>    <x-slot name=\"form\">        <div class=\"col-span-6\">            <x-label value=\"{{ __('Team Owner') }}\" />            <div class=\"flex items-center mt-2\">                <img class=\"size-12 rounded-full object-cover\" src=\"{{ $this->user->profile_photo_url }}\"                    alt=\"{{ $this->user->name }}\">                <div class=\"ms-4 leading-tight\">                    <div class=\"text-gray-900 dark:text-white\">{{ $this->user->name }}</div>                    <div class=\"text-gray-700 dark:text-gray-300 text-sm\">{{ $this->user->email }}</div>                </div>            </div>        </div>        <div class=\"col-span-6 sm:col-span-4\">            <x-label for=\"name\" value=\"{{ __('Team Name') }}\" />            <x-input id=\"name\" type=\"text\" class=\"mt-1 block w-full\" wire:model=\"state.name\" autofocus />            <x-input-error for=\"name\" class=\"mt-2\" />        </div>    </x-slot>    <x-slot name=\"actions\">        <x-button type=\"submit\">            {{ __('Create') }}        </x-button>    </x-slot></x-form-section>"
        },
        {
            "type": "View",
            "name": "create.blade.php",
            "file": "./resources/views/teams/create.blade.php",
            "content": "<x-app-layout>    <x-slot name=\"header\">        <h2 class=\"font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight\">            {{ __('Create Team') }}        </h2>    </x-slot>    <div>        <div class=\"max-w-7xl mx-auto py-10 sm:px-6 lg:px-8\">            @livewire('teams.create-team-form')        </div>    </div></x-app-layout>"
        },
        {
            "type": "View",
            "name": "delete-team-form.blade.php",
            "file": "./resources/views/teams/delete-team-form.blade.php",
            "content": "<x-action-section>    <x-slot name=\"title\">        {{ __('Delete Team') }}    </x-slot>    <x-slot name=\"description\">        {{ __('Permanently delete this team.') }}    </x-slot>    <x-slot name=\"content\">        <div class=\"max-w-xl text-sm text-gray-600 dark:text-gray-400\">            {{ __('Once a team is deleted, all of its resources and data will be permanently deleted. Before deleting this team, please download any data or information regarding this team that you wish to retain.') }}        </div>        <div class=\"mt-5\">            <x-danger-button wire:click=\"$toggle('confirmingTeamDeletion')\" wire:loading.attr=\"disabled\">                {{ __('Delete Team') }}            </x-danger-button>        </div>        <!-- Delete Team Confirmation Modal -->        <x-confirmation-modal wire:model.live=\"confirmingTeamDeletion\">            <x-slot name=\"title\">                {{ __('Delete Team') }}            </x-slot>            <x-slot name=\"content\">                {{ __('Are you sure you want to delete this team? Once a team is deleted, all of its resources and data will be permanently deleted.') }}            </x-slot>            <x-slot name=\"footer\">                <x-secondary-button wire:click=\"$toggle('confirmingTeamDeletion')\" wire:loading.attr=\"disabled\">                    {{ __('Cancel') }}                </x-secondary-button>                <x-danger-button class=\"ms-3\" wire:click=\"deleteTeam\" wire:loading.attr=\"disabled\">                    {{ __('Delete Team') }}                </x-danger-button>            </x-slot>        </x-confirmation-modal>    </x-slot></x-action-section>"
        },
        {
            "type": "View",
            "name": "show.blade.php",
            "file": "./resources/views/teams/show.blade.php",
            "content": "<x-app-layout>    <x-slot name=\"header\">        <h2 class=\"font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight\">            {{ __('Team Settings') }}        </h2>    </x-slot>    <div>        <div class=\"max-w-7xl mx-auto py-10 sm:px-6 lg:px-8\">            @livewire('teams.update-team-name-form', ['team' => $team])            @livewire('teams.team-member-manager', ['team' => $team])            @if (Gate::check('delete', $team) && ! $team->personal_team)                <x-section-border />                <div class=\"mt-10 sm:mt-0\">                    @livewire('teams.delete-team-form', ['team' => $team])                </div>            @endif        </div>    </div></x-app-layout>"
        },
        {
            "type": "View",
            "name": "team-member-manager.blade.php",
            "file": "./resources/views/teams/team-member-manager.blade.php",
            "content": "<div>    @if (Gate::check('addTeamMember', $team))        <x-section-border />        <!-- Add Team Member -->        <div class=\"mt-10 sm:mt-0\">            <x-form-section submit=\"addTeamMember\">                <x-slot name=\"title\">                    {{ __('Add Team Member') }}                </x-slot>                <x-slot name=\"description\">                    {{ __('Add a new team member to your team, allowing them to collaborate with you.') }}                </x-slot>                <x-slot name=\"form\">                    <div class=\"col-span-6\">                        <div class=\"max-w-xl text-sm text-gray-600 dark:text-gray-400\">                            {{ __('Please provide the email address of the person you would like to add to this team.') }}                        </div>                    </div>                    <!-- Member Email -->                    <div class=\"col-span-6 sm:col-span-4\">                        <x-label for=\"email\" value=\"{{ __('Email') }}\" />                        <x-input id=\"email\" type=\"email\" class=\"mt-1 block w-full\" wire:model=\"addTeamMemberForm.email\" />                        <x-input-error for=\"email\" class=\"mt-2\" />                    </div>                    <!-- Role -->                    @if (count($this->roles) > 0)                        <div class=\"col-span-6 lg:col-span-4\">                            <x-label for=\"role\" value=\"{{ __('Role') }}\" />                            <x-input-error for=\"role\" class=\"mt-2\" />                            <div class=\"relative z-0 mt-1 border border-gray-200 dark:border-gray-700 rounded-lg cursor-pointer\">                                @foreach ($this->roles as $index => $role)                                    <button type=\"button\" class=\"relative px-4 py-3 inline-flex w-full rounded-lg focus:z-10 focus:outline-none focus:border-indigo-500 dark:focus:border-indigo-600 focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-600 {{ $index > 0 ? 'border-t border-gray-200 dark:border-gray-700 focus:border-none rounded-t-none' : '' }} {{ ! $loop->last ? 'rounded-b-none' : '' }}\"                                                    wire:click=\"$set('addTeamMemberForm.role', '{{ $role->key }}')\">                                        <div class=\"{{ isset($addTeamMemberForm['role']) && $addTeamMemberForm['role'] !== $role->key ? 'opacity-50' : '' }}\">                                            <!-- Role Name -->                                            <div class=\"flex items-center\">                                                <div class=\"text-sm text-gray-600 dark:text-gray-400 {{ $addTeamMemberForm['role'] == $role->key ? 'font-semibold' : '' }}\">                                                    {{ $role->name }}                                                </div>                                                @if ($addTeamMemberForm['role'] == $role->key)                                                    <svg class=\"ms-2 size-5 text-green-400\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">                                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />                                                    </svg>                                                @endif                                            </div>                                            <!-- Role Description -->                                            <div class=\"mt-2 text-xs text-gray-600 dark:text-gray-400 text-start\">                                                {{ $role->description }}                                            </div>                                        </div>                                    </button>                                @endforeach                            </div>                        </div>                    @endif                </x-slot>                <x-slot name=\"actions\">                    <x-action-message class=\"me-3\" on=\"saved\">                        {{ __('Added.') }}                    </x-action-message>                    <x-button>                        {{ __('Add') }}                    </x-button>                </x-slot>            </x-form-section>        </div>    @endif    @if ($team->teamInvitations->isNotEmpty() && Gate::check('addTeamMember', $team))        <x-section-border />        <!-- Team Member Invitations -->        <div class=\"mt-10 sm:mt-0\">            <x-action-section>                <x-slot name=\"title\">                    {{ __('Pending Team Invitations') }}                </x-slot>                <x-slot name=\"description\">                    {{ __('These people have been invited to your team and have been sent an invitation email. They may join the team by accepting the email invitation.') }"
        },
        {
            "type": "View",
            "name": "update-team-name-form.blade.php",
            "file": "./resources/views/teams/update-team-name-form.blade.php",
            "content": "<x-form-section submit=\"updateTeamName\">    <x-slot name=\"title\">        {{ __('Team Name') }}    </x-slot>    <x-slot name=\"description\">        {{ __('The team\\'s name and owner information.') }}    </x-slot>    <x-slot name=\"form\">        <!-- Team Owner Information -->        <div class=\"col-span-6\">            <x-label value=\"{{ __('Team Owner') }}\" />            <div class=\"flex items-center mt-2\">                <img class=\"size-12 rounded-full object-cover\" src=\"{{ $team->owner->profile_photo_url }}\" alt=\"{{ $team->owner->name }}\">                <div class=\"ms-4 leading-tight\">                    <div class=\"text-gray-900 dark:text-white\">{{ $team->owner->name }}</div>                    <div class=\"text-gray-700 dark:text-gray-300 text-sm\">{{ $team->owner->email }}</div>                </div>            </div>        </div>        <!-- Team Name -->        <div class=\"col-span-6 sm:col-span-4\">            <x-label for=\"name\" value=\"{{ __('Team Name') }}\" />            <x-input id=\"name\"                        type=\"text\"                        class=\"mt-1 block w-full\"                        wire:model=\"state.name\"                        :disabled=\"! Gate::check('update', $team)\" />            <x-input-error for=\"name\" class=\"mt-2\" />        </div>    </x-slot>    @if (Gate::check('update', $team))        <x-slot name=\"actions\">            <x-action-message class=\"me-3\" on=\"saved\">                {{ __('Saved.') }}            </x-action-message>            <x-button>                {{ __('Save') }}            </x-button>        </x-slot>    @endif</x-form-section>"
        },
        {
            "type": "View",
            "name": "team-invitation.blade.php",
            "file": "./resources/views/emails/team-invitation.blade.php",
            "content": "@component('mail::message'){{ __('You have been invited to join the :team team!', ['team' => $invitation->team->name]) }}@if (Laravel\\Fortify\\Features::enabled(Laravel\\Fortify\\Features::registration())){{ __('If you do not have an account, you may create one by clicking the button below. After creating an account, you may click the invitation acceptance button in this email to accept the team invitation:') }}@component('mail::button', ['url' => route('register')]){{ __('Create Account') }}@endcomponent{{ __('If you already have an account, you may accept this invitation by clicking the button below:') }}@else{{ __('You may accept this invitation by clicking the button below:') }}@endif@component('mail::button', ['url' => $acceptUrl]){{ __('Accept Invitation') }}@endcomponent{{ __('If you did not expect to receive an invitation to this team, you may discard this email.') }}@endcomponent"
        },
        {
            "type": "View",
            "name": "dashboard.blade.php",
            "file": "./resources/views/dashboard.blade.php",
            "content": "<x-app-layout>    <x-slot name=\"header\">        <h2 class=\"font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight\">            {{ __('Dashboard') }}        </h2>    </x-slot>    <div class=\"py-12\">        <div class=\"max-w-7xl mx-auto sm:px-6 lg:px-8\">            <div class=\"bg-white dark:bg-gray-800 overflow-hidden shadow-xl sm:rounded-lg\">                <x-welcome />            </div>        </div>    </div></x-app-layout>"
        },
        {
            "type": "View",
            "name": "organization-form.blade.php",
            "file": "./resources/views/livewire/organization/organization-form.blade.php",
            "content": "<div>    @if ($showModal)        <div class=\"fixed inset-0 bg-gray-600 bg-opacity-75 transition-opacity z-40\" wire:click=\"closeModal\"></div>        <div class=\"fixed inset-0 z-50 overflow-y-auto\">            <div class=\"flex min-h-full items-center justify-center p-4 text-center sm:p-0\">                <div class=\"relative w-full max-w-lg transform rounded-xl bg-white text-left shadow-2xl transition-all\">                    {{-- Modal Header --}}                    <div class=\"flex items-center justify-between rounded-t-xl bg-gray-50 px-6 py-4\">                        <h3 class=\"text-xl font-semibold text-gray-800\">                            {{ $isEditing ? 'Edit Organization' : 'Create Organization' }}                        </h3>                        <button type=\"button\" class=\"text-gray-400 hover:text-gray-600\" wire:click=\"closeModal\">                            <svg class=\"h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"                                stroke=\"currentColor\" aria-hidden=\"true\">                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"                                    d=\"M6 18L18 6M6 6l12 12\" />                            </svg>                        </button>                    </div>                    {{-- Form Fields --}}                    <div class=\"p-6 space-y-6\">                        {{-- Name --}}                        <div>                            <label for=\"name\" class=\"block text-sm font-medium text-gray-700 mb-1\">Name <span                                    class=\"text-red-500\">*</span></label>                            <input type=\"text\" id=\"name\" wire:model=\"name\"                                class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm placeholder-gray-400\"                                placeholder=\"Enter organization name\">                            @error('name')                                <span class=\"text-red-500 text-sm mt-1 block\">{{ $message }}</span>                            @enderror                        </div>                        {{-- Description --}}                        <div>                            <label for=\"description\"                                class=\"block text-sm font-medium text-gray-700 mb-1\">Description</label>                            <textarea id=\"description\" wire:model=\"description\" rows=\"4\"                                class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm placeholder-gray-400\"                                placeholder=\"Enter organization description\"></textarea>                            @error('description')                                <span class=\"text-red-500 text-sm mt-1 block\">{{ $message }}</span>                            @enderror                        </div>                        {{-- Status --}}                        <div class=\"pt-2\">                            <label class=\"flex items-center\">                                <input type=\"checkbox\" wire:model=\"is_active\"                                    class=\"h-4 w-4 rounded border-gray-300 text-blue-600 shadow-sm focus:ring-blue-500\">                                <span class=\"ml-2 text-sm text-gray-700\">Active Organization</span>                            </label>                        </div>                    </div>                    {{-- Modal Footer --}}                    <div class=\"flex justify-end space-x-3 rounded-b-xl bg-gray-50 px-6 py-4\">                        <x-button.secondary wire:click=\"closeModal\">                            Cancel                        </x-button.secondary>                        <x-button.primary wire:click=\"save\">                            {{ $isEditing ? 'Update' : 'Save' }}                        </x-button.primary>                    </div>                </div>            </div>        </div>    @endif</div>"
        },
        {
            "type": "View",
            "name": "organization-list.blade.php",
            "file": "./resources/views/livewire/organization/organization-list.blade.php",
            "content": "{{-- resources/views/livewire/organization/organization-list.blade.php --}}<div>    <!-- Header with Search and Actions -->    <div class=\"flex flex-col sm:flex-row justify-between items-center mb-6 space-y-4 sm:space-y-0\">        <h2 class=\"text-2xl font-semibold text-gray-900\">Organizations</h2>        <div class=\"flex space-x-4\">            <!-- Search Input -->            <div class=\"relative\">                <input type=\"text\" wire:model.debounce.300ms=\"search\" placeholder=\"Search organizations...\"                    class=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\">                <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">                    <x-heroicon-c-magnifying-glass class=\"h-5 w-5 text-gray-400\" />                </div>            </div>            <!-- Create Button -->            <x-button wire:click=\"$dispatch('openOrganizationModal')\">                <x-heroicon-o-plus class=\"h-5 w-5 mr-2\" />                New Organization            </x-button>        </div>    </div>    <!-- Results Count -->    <div class=\"mb-4 text-sm text-gray-600\">        Showing {{ $organizations->firstItem() }} to {{ $organizations->lastItem() }} of {{ $organizations->total() }}        results    </div>    <!-- Table -->    <div class=\"bg-white shadow-sm rounded-lg overflow-hidden\">        <table class=\"min-w-full divide-y divide-gray-200\">            <thead class=\"bg-gray-50\">                <tr>                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer\"                        wire:click=\"sortBy('name')\">                        Name                        <x-sort-indicator :field=\"'name'\" :sortField=\"$sortField\" :sortDirection=\"$sortDirection\" />                    </th>                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">                        Description                    </th>                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer\"                        wire:click=\"sortBy('is_active')\">                        Status                        <x-sort-indicator :field=\"'is_active'\" :sortField=\"$sortField\" :sortDirection=\"$sortDirection\" />                    </th>                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">                        Actions                    </th>                </tr>            </thead>            <tbody class=\"bg-white divide-y divide-gray-200\">                @forelse($organizations as $organization)                    <tr wire:key=\"organization-{{ $organization->id }}\">                        <td class=\"px-6 py-4 whitespace-nowrap\">                            <div class=\"text-sm font-medium text-gray-900\">{{ $organization->name }}</div>                        </td>                        <td class=\"px-6 py-4\">                            <div class=\"text-sm text-gray-600 line-clamp-2\">{{ $organization->description }}</div>                        </td>                        <td class=\"px-6 py-4 whitespace-nowrap\">                            <x-badge :color=\"$organization->is_active ? 'green' : 'gray'\">                                {{ $organization->is_active ? 'Active' : 'Inactive' }}                            </x-badge>                        </td>                        <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">                            <x-button wire:click=\"$dispatch('editOrganization', {{ $organization }})\">                                Edit                            </x-button>                            <x-button wire:click=\"$dispatch('deleteOrganization', {{ $organization->id }})\"                                variant=\"danger\">                                Delete                            </x-button>                        </td>                    </tr>                @empty                    <tr>                        <td colspan=\"4\" class=\"px-6 py-8 text-center text-gray-500\">                            <x-heroicon-o-building-office-2 class=\"mx-auto h-12 w-12 text-gray-400\" />                            <p class=\"mt-2 text-sm font-medium text-gray-900\">No organizations found</p>                            {{-- ← Check this line --}}                            <p class=\"text-sm text-gray-500\">Get started by creating a new organization.</p>                            <div class=\"mt-4\">                                <x-button wire:click=\"$dispatch('openOrganizationModal')\">                                    Create Organization                                </x-button>                            </div>                        </td>                    </tr>                @endforelse            </tbody>"
        },
        {
            "type": "View",
            "name": "organization-tree.blade.php",
            "file": "./resources/views/livewire/organization-tree.blade.php",
            "content": "<div class=\"p-6 bg-white rounded shadow\">    <h2 class=\"text-2xl font-semibold mb-4\">Organizational Tree </h2>    <div class=\"mb-4\">        <label for=\"organization-filter\" class=\"block text-gray-700 font-bold mb-2\">Filter by Organization:</label>        <select id=\"organization-filter\" wire:change=\"filterByOrganization($event.target.value)\"            class=\"block w-full border border-gray-300 rounded-md p-2\">            <option value=\"\">All Organizations</option>            @foreach (\\App\\Models\\Organization::all() as $org)                <option value=\"{{ $org->id }}\">{{ $org->name }}</option>            @endforeach        </select>    </div>    <div x-data=\"{        dropTarget: false,        drop(event) {            const unitId = event.dataTransfer.getData('text/plain');            $wire.updateParent(unitId, null);            this.dropTarget = false;        },        dragOver(event) {            event.preventDefault();            this.dropTarget = true;        },        dragLeave() {            this.dropTarget = false;        }    }\" @drop=\"drop\" @dragover=\"dragOver\" @dragleave=\"dragLeave\"        class=\"border-dashed p-4 rounded text-center mb-4 transition-colors\"        :class=\"{ 'border-blue-500 bg-blue-50': dropTarget, 'border-gray-300': !dropTarget }\">        <span class=\"text-gray-500\">Drag a unit here to make it a root node.</span>    </div>    @if ($roots->count())        <ul>            @include('partials.organization-unit-tree', ['units' => $roots])        </ul>    @else        <p class=\"text-gray-500\">No organizational units found. Start by adding one!</p>    @endif</div>"
        },
        {
            "type": "View",
            "name": "member-manager.blade.php",
            "file": "./resources/views/livewire/member-manager.blade.php",
            "content": "<div class=\"bg-white shadow-md rounded-lg p-6\">    <h2 class=\"text-2xl font-bold mb-4\">Organization Members</h2>    <div class=\"mb-4\">        <label for=\"organization-filter\" class=\"block text-gray-700 font-bold mb-2\">Select Organization:</label>        <select id=\"organization-filter\" wire:model.live=\"organizationId\"            class=\"block w-full border border-gray-300 rounded-md p-2\">            <option value=\"\">Select an Organization</option>            @foreach ($organizations as $org)                <option value=\"{{ $org->id }}\">                    {{ $org->name }}                </option>            @endforeach        </select>    </div>    <div class=\"mb-4\">        <input wire:model.live=\"search\" type=\"search\" placeholder=\"Search members by name or email...\"            class=\"w-full p-2 border border-gray-300 rounded-md\">    </div>    <div class=\"overflow-x-auto\">        <table class=\"min-w-full divide-y divide-gray-200\">            <thead class=\"bg-gray-50\">                <tr>                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email                    </th>                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Position                    </th>                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Unit</th>                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions                    </th>                </tr>            </thead>            <tbody class=\"bg-white divide-y divide-gray-200\">                @forelse ($members as $member)                    <tr>                        <td class=\"px-6 py-4 whitespace-nowrap\">{{ $member->name }}</td>                        <td class=\"px-6 py-4 whitespace-nowrap\">{{ $member->email }}</td>                        <td class=\"px-6 py-4 whitespace-nowrap\">{{ $member->pivot->position ?? 'N/A' }}</td>                        <td class=\"px-6 py-4 whitespace-nowrap\">                            @if ($member->pivot->organization_unit_id)                                {{ \\App\\Models\\OrganizationUnit::find($member->pivot->organization_unit_id)->name ?? 'N/A' }}                            @else                                N/A                            @endif                        </td>                        <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">                            <a href=\"#\" class=\"text-indigo-600 hover:text-indigo-900\">Edit</a>                            <a href=\"#\" class=\"ml-2 text-red-600 hover:text-red-900\">Remove</a>                        </td>                    </tr>                @empty                    <tr>                        <td colspan=\"5\" class=\"px-6 py-4 text-center text-gray-500\">No members found.</td>                    </tr>                @endforelse            </tbody>        </table>    </div></div>"
        },
        {
            "type": "View",
            "name": "user-placement.blade.php",
            "file": "./resources/views/livewire/user-placement.blade.php",
            "content": "<div class=\"flex h-screen bg-gray-100 p-8 font-sans\">    <div class=\"w-1/4 bg-white rounded-lg shadow-xl p-6 mr-6 flex flex-col\">        <h2 class=\"text-2xl font-bold mb-4\">Unassigned Users</h2>        <div class=\"mb-4\">            <input wire:model.live=\"search\" type=\"search\" placeholder=\"Search users...\"                class=\"w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\">        </div>        <div class=\"flex-grow overflow-y-auto pr-2\">            @forelse($unassignedUsers as $user)                <div x-data=\"{ dragging: false }\"                    @dragstart.self=\"dragging = true; event.dataTransfer.setData('text/plain', {{ $user->id }});\"                    @dragend.self=\"dragging = false\" draggable=\"true\"                    class=\"flex items-center bg-blue-50 text-blue-800 p-3 rounded-lg mb-2 cursor-grab text-sm transition-all duration-200 hover:bg-blue-100 transform hover:scale-105\"                    :class=\"{ 'opacity-50 transform scale-95': dragging }\">                    <span class=\"mr-2\">👤</span>                    {{ $user->name }} ({{ $user->email }})                </div>            @empty                <div class=\"text-gray-500 text-center py-4 text-sm\">                    All users are assigned or no users match your search.                </div>            @endforelse        </div>    </div>    <div class=\"w-3/4 bg-white rounded-lg shadow-xl p-6 flex flex-col\">        <h2 class=\"text-2xl font-bold mb-4\">Organizational Structure</h2>        <div class=\"flex-grow overflow-y-auto pr-2\" x-data=\"{ dropTarget: false }\" @dragover.prevent.stop=\"dropTarget = true\"            @dragleave.prevent.stop=\"dropTarget = false\"            @drop.prevent.stop=\"                dropTarget = false;                const userId = event.dataTransfer.getData('text/plain');                if (userId) {                    $wire.assignUserToUnit(userId, null); // Drop onto null unit                }            \"            :class=\"{ 'border-2 border-dashed border-gray-400': dropTarget }\">            <div class=\"min-h-[400px]\">                @include('partials.user-unit-tree', ['units' => $treeRoots])            </div>        </div>    </div></div>"
        },
        {
            "type": "View",
            "name": "dashboard.blade.php",
            "file": "./resources/views/livewire/accounting/dashboard.blade.php",
            "content": "<div class=\"p-6 bg-gray-100 dark:bg-gray-900 min-h-screen\">    <div class=\"max-w-7xl mx-auto sm:px-6 lg:px-8\">        <h1 class=\"text-3xl font-bold mb-6 text-gray-900 dark:text-gray-100\">Financial Dashboard</h1>        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">            <!-- Summary Cards -->            @foreach ($summary as $key => $value)                <div                    class=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 border border-gray-200 dark:border-gray-700 hover:shadow-xl transition-shadow duration-300\">                    <div class=\"text-sm font-semibold text-gray-500 dark:text-gray-400 capitalize\">                        {{ str_replace('_', ' ', $key) }}</div>                    <div class=\"text-2xl font-bold mt-1 text-gray-900 dark:text-gray-100\">${{ number_format($value, 2) }}                    </div>                </div>            @endforeach        </div>        <!-- Recent Transactions/Activity -->        <div class=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 border border-gray-200 dark:border-gray-700\">            <h2 class=\"text-xl font-bold mb-4 text-gray-900 dark:text-gray-100\">Recent Activity</h2>            <!-- This section would be a Livewire partial or component for a recent transactions feed -->            <ul class=\"divide-y divide-gray-200 dark:divide-gray-700\">                <li class=\"py-4 flex justify-between items-center\">                    <span class=\"text-gray-800 dark:text-gray-200\">Payment for consulting services</span>                    <span class=\"text-green-500 font-semibold\">+ $5,000.00</span>                </li>                <li class=\"py-4 flex justify-between items-center\">                    <span class=\"text-gray-800 dark:text-gray-200\">Office supplies expense</span>                    <span class=\"text-red-500 font-semibold\">- $250.00</span>                </li>                <li class=\"py-4 flex justify-between items-center\">                    <span class=\"text-gray-800 dark:text-gray-200\">Rent payment</span>                    <span class=\"text-red-500 font-semibold\">- $1,200.00</span>                </li>            </ul>        </div>    </div></div>"
        },
        {
            "type": "View",
            "name": "accounts.blade.php",
            "file": "./resources/views/livewire/accounting/accounts.blade.php",
            "content": "<div class=\"p-6 bg-gray-100 dark:bg-gray-900 min-h-screen\">    <div class=\"max-w-7xl mx-auto sm:px-6 lg:px-8\">        <h1 class=\"text-3xl font-bold mb-6 text-gray-900 dark:text-gray-100\">Chart of Accounts</h1>        <div class=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 border border-gray-200 dark:border-gray-700\">            <div class=\"flex justify-between items-center mb-4\">                <h2 class=\"text-xl font-bold text-gray-900 dark:text-gray-100\">All Accounts</h2>                <button wire:click=\"$toggle('showForm')\"                    class=\"px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition duration-150 ease-in-out shadow-md\">                    {{ $showForm ? 'Hide Form' : 'Add New Account' }}                </button>            </div>            <!-- New Account Form -->            <div x-show=\"true\" x-transition x-data=\"{ showForm: @entangle('showForm') }\" x-cloak>                <form wire:submit.prevent=\"createAccount\" class=\"mb-6 space-y-4\" x-show=\"showForm\">                    <div class=\"flex flex-col md:flex-row gap-4\">                        <input type=\"text\" wire:model.defer=\"name\" placeholder=\"Account Name\" required                            class=\"flex-1 rounded-md border-gray-300 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 focus:ring-indigo-500 focus:border-indigo-500\">                        <select wire:model.defer=\"type\" required                            class=\"flex-1 rounded-md border-gray-300 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 focus:ring-indigo-500 focus:border-indigo-500\">                            <option value=\"\">Select Account Type</option>                            <option value=\"Asset\">Asset</option>                            <option value=\"Liability\">Liability</option>                            <option value=\"Equity\">Equity</option>                            <option value=\"Revenue\">Revenue</option>                            <option value=\"Expense\">Expense</option>                        </select>                    </div>                    <div class=\"flex items-center gap-4\">                        <label for=\"is_active\"                            class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Active</label>                        <input type=\"checkbox\" wire:model.defer=\"is_active\" id=\"is_active\"                            class=\"rounded border-gray-300 dark:border-gray-600 text-indigo-600 shadow-sm focus:ring-indigo-500\">                        <button type=\"submit\"                            class=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition duration-150 ease-in-out shadow-md\">                            Save Account                        </button>                    </div>                </form>            </div>            <!-- Reusable Accounts Table Partial -->            @include('partials.accounts-table', ['accounts' => $accounts])        </div>    </div></div>"
        },
        {
            "type": "View",
            "name": "journal-entries.blade.php",
            "file": "./resources/views/livewire/accounting/journal-entries.blade.php",
            "content": "<div class=\"min-h-screen bg-gray-50 py-8\">    <!-- Notification System -->    <x-notification-system position=\"top-right\" />    <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">        <!-- Header -->        <div class=\"mb-8\">            <div class=\"flex justify-between items-center\">                <div>                    <h1 class=\"text-3xl font-bold text-gray-900\">Journal Entries</h1>                    <p class=\"text-gray-600 mt-2\">Manage your accounting entries</p>                </div>                <div class=\"flex items-center space-x-4\">                    <x-status-badge :status=\"$status\" />                    <button wire:click=\"loadEntries\" wire:loading.attr=\"disabled\"                        class=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50\">                        <span wire:loading.remove>🔄 Refresh</span>                        <span wire:loading>                            <x-loading-spinner size=\"small\" color=\"text-white\" />                        </span>                    </button>                </div>            </div>        </div>        <!-- Error Alert -->        @if ($error)            <div class=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">                <div class=\"flex items-center\">                    <div class=\"flex-shrink-0\">                        <svg class=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">                            <path fill-rule=\"evenodd\"                                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"                                clip-rule=\"evenodd\" />                        </svg>                    </div>                    <div class=\"ml-3\">                        <h3 class=\"text-sm font-medium text-red-800\">Error</h3>                        <p class=\"text-sm text-red-600 mt-1\">{{ $error }}</p>                    </div>                </div>            </div>        @endif        <!-- Data Table -->        <x-data-table :headers=\"['Reference', 'Date', 'Description', 'Status', 'Created By', 'Actions']\" :data=\"$journalEntries\" :loading=\"$isLoading\" emptyMessage=\"No journal entries found\">            @foreach ($journalEntries as $entry)                <tr class=\"hover:bg-gray-50 transition-colors\">                    <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">                        {{ $entry['reference_number'] }}                    </td>                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">                        {{ \\Carbon\\Carbon::parse($entry['entry_date'])->format('M d, Y') }}                    </td>                    <td class=\"px-6 py-4 text-sm text-gray-500\">                        {{ $entry['description'] }}                    </td>                    <td class=\"px-6 py-4 whitespace-nowrap\">                        <x-status-badge :status=\"$entry['status'] === 'posted' ? 'success' : ($entry['status'] === 'draft' ? 'warning' : 'error')\" :text=\"$entry['status']\" />                    </td>                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">                        {{ $entry['created_by'] }}                    </td>                    <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">                        @if ($entry['status'] === 'draft')                            <button wire:click=\"postEntry({{ $entry['id'] }})\"                                class=\"text-green-600 hover:text-green-900 mr-3\">                                Post                            </button>                        @elseif($entry['status'] === 'posted')                            <button wire:click=\"voidEntry({{ $entry['id'] }})\" class=\"text-red-600 hover:text-red-900\">                                Void                            </button>                        @endif                    </td>                </tr>            @endforeach        </x-data-table>    </div></div>"
        },
        {
            "type": "View",
            "name": "reports.blade.php",
            "file": "./resources/views/livewire/accounting/reports.blade.php",
            "content": "<div x-data=\"{ activeTab: 'trial-balance' }\" class=\"p-4\">{{-- Tab Navigation --}}<div class=\"border-b border-gray-200\">        <nav class=\"-mb-px flex space-x-8\" aria-label=\"Tabs\"><a href=\"#\" @click.prevent=\"activeTab = 'trial-balance'\"                :class=\"{ 'border-indigo-500 text-indigo-600': activeTab === 'trial-balance', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'trial-balance' }\"                class=\"whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm\">Trial Balance</a><a href=\"#\"                @click.prevent=\"activeTab = 'balance-sheet'\"                :class=\"{ 'border-indigo-500 text-indigo-600': activeTab === 'balance-sheet', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'balance-sheet' }\"                class=\"whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm\">Balance Sheet</a><a href=\"#\"                @click.prevent=\"activeTab = 'income-statement'\"                :class=\"{ 'border-indigo-500 text-indigo-600': activeTab === 'income-statement', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'income-statement' }\"                class=\"whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm\">Income Statement</a></nav>    </div>{{-- Tab Content --}}    <div class=\"mt-8 p-4 bg-white shadow-lg rounded-xl overflow-hidden\">        <div x-show=\"activeTab === 'trial-balance'\" class=\"p-4\">            @include('partials.trial-bakance')        </div>        <div x-show=\"activeTab === 'balance-sheet'\" class=\"p-4\">            {{-- @include('livewire.accounting.reports._balance-sheet') --}}            <p>Balance Sheet content goes here.</p>        </div>        <div x-show=\"activeTab === 'income-statement'\" class=\"p-4\">            {{-- @include('livewire.accounting.reports._income-statement') --}}            <p>Income Statement content goes here.</p>        </div>    </div></div>"
        },
        {
            "type": "View",
            "name": "index.blade.php",
            "file": "./resources/views/organizations/index.blade.php",
            "content": "{{-- resources/views/organizations/index.blade.php --}}<x-layout>    {{-- Header Section --}}    <div class=\"bg-gradient-to-r from-gray-50 to-gray-100 py-8 shadow-sm\">        <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex justify-between items-center\">            <h1 class=\"text-3xl font-extrabold text-gray-800 tracking-tight\">                🏭 Organization Management            </h1>        </div>    </div>    {{-- Main Content Area --}}    <div class=\"bg-gray-50 min-h-screen py-10\">        <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">            {{-- Organization List Component --}}            <div class=\"p-4 bg-white shadow-lg rounded-xl overflow-hidden mb-8\">                @livewire('organization.organization-list')            </div>            <div x-data=\"{ open: false }\">                <button @click=\"open = !open\">Toggle</button>                <span :class=\"{ 'rotate-90': open }\" class=\"transform transition-transform duration-300\">▶</span>            </div>            <div class=\"container mx-auto p-4\">                @livewire('user-placement', ['organizationId' => App\\Models\\Organization::first()->id])            </div>            <div class=\"container mx-auto p-4\">                @livewire('member-manager', ['organization' => App\\Models\\Organization::first()])            </div>            <div class=\"container mx-auto p-4\">                @livewire('organization-tree')            </div>            {{-- The Modal Component (no wrapper div needed) --}}            @livewire('organization.organization-form')        </div>    </div></x-layout>"
        },
        {
            "type": "View",
            "name": "navigation-menu.blade.php",
            "file": "./resources/views/navigation-menu.blade.php",
            "content": "<nav x-data=\"{ open: false }\" class=\"bg-white dark:bg-gray-800 border-b border-gray-100 dark:border-gray-700\">    <!-- Primary Navigation Menu -->    <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">        <div class=\"flex justify-between h-16\">            <div class=\"flex\">                <!-- Logo -->                <div class=\"shrink-0 flex items-center\">                    <a href=\"{{ route('dashboard') }}\">                        <x-application-mark class=\"block h-9 w-auto\" />                    </a>                </div>                <!-- Navigation Links -->                <div class=\"hidden space-x-8 sm:-my-px sm:ms-10 sm:flex\">                    <x-nav-link href=\"{{ route('dashboard') }}\" :active=\"request()->routeIs('dashboard')\">                        {{ __('Dashboard') }}                    </x-nav-link>                </div>            </div>            <div class=\"hidden sm:flex sm:items-center sm:ms-6\">                <!-- Teams Dropdown -->                @if (Laravel\\Jetstream\\Jetstream::hasTeamFeatures())                    <div class=\"ms-3 relative\">                        <x-dropdown align=\"right\" width=\"60\">                            <x-slot name=\"trigger\">                                <span class=\"inline-flex rounded-md\">                                    <button type=\"button\"                                        class=\"inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-gray-500 dark:text-gray-400 bg-white dark:bg-gray-800 hover:text-gray-700 dark:hover:text-gray-300 focus:outline-none focus:bg-gray-50 dark:focus:bg-gray-700 active:bg-gray-50 dark:active:bg-gray-700 transition ease-in-out duration-150\">                                        {{ Auth::user()->currentTeam->name ?? Auth::user()->name }}                                        <svg class=\"ms-2 -me-0.5 size-4\" xmlns=\"http://www.w3.org/2000/svg\"                                            fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\"                                                d=\"M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9\" />                                        </svg>                                    </button>                                </span>                            </x-slot>                            <x-slot name=\"content\">                                <div class=\"w-60\">                                    <!-- Team Management -->                                    <div class=\"block px-4 py-2 text-xs text-gray-400\">                                        {{ __('Manage Team') }}                                    </div>                                    <!-- Team Settings -->                                    <x-dropdown-link                                        href=\"{{ route('teams.show', Auth::user()->currentTeam->id ?? 0) }}\">                                        {{ __('Team Settings') }}                                    </x-dropdown-link>                                    @can('create', Laravel\\Jetstream\\Jetstream::newTeamModel())                                        <x-dropdown-link href=\"{{ route('teams.create') }}\">                                            {{ __('Create New Team') }}                                        </x-dropdown-link>                                    @endcan                                    <!-- Team Switcher -->                                    @if (Auth::user()->allTeams()->count() > 1)                                        <div class=\"border-t border-gray-200 dark:border-gray-600\"></div>                                        <div class=\"block px-4 py-2 text-xs text-gray-400\">                                            {{ __('Switch Teams') }}                                        </div>                                        @foreach (Auth::user()->allTeams() as $team)                                            <x-switchable-team :team=\"$team\" />                                        @endforeach                                    @endif                                </div>                            </x-slot>                        </x-dropdown>                    </div>                @endif                <!-- Settings Dropdown -->                <div class=\"ms-3 relative\">                    <x-dropdown align=\"right\" width=\"48\">                        <x-slot name=\"trigger\">                            @if (Laravel\\Jetstream\\Jetstream::managesProfilePhotos())                                <button                                    class=\"flex text-sm border-2 border-transparent rounded-full focus:outline-none focus:border-gray-300 transition\">                                    <img class=\"size-8 rounded-full object-cover\"                                        src=\"{{"
        },
        {
            "type": "View",
            "name": "organization-unit-tree.blade.php",
            "file": "./resources/views/partials/organization-unit-tree.blade.php",
            "content": "@foreach ($units as $unit)    <li wire:key=\"unit-{{ $unit->id }}\" class=\"relative\">        <div x-data=\"{            dropTarget: false,            drop(event) {                event.preventDefault();                const unitId = event.dataTransfer.getData('text/plain');                $wire.updateParent(unitId, {{ $unit->id }});                this.dropTarget = false;            },            dragOver(event) {                event.preventDefault();                this.dropTarget = true;            },            dragLeave() {                this.dropTarget = false;            },        }\" @drop=\"drop\" @dragover=\"dragOver\" @dragleave=\"dragLeave\"            class=\"flex items-center pl-4 py-2 border-l border-r-4 border-dashed border-transparent transition-colors duration-200\"            :class=\"{ 'border-blue-500 bg-blue-50': dropTarget }\">            <div class=\"flex items-center cursor-move\" draggable=\"true\" x-data=\"{                dragStart(event) {                    event.dataTransfer.setData('text/plain', {{ $unit->id }});                    event.stopPropagation();                }            }\" @dragstart=\"dragStart\">                <span class=\"mr-2 text-gray-500\">▶</span>                {{ $unit->name }}            </div>        </div>        <div x-data=\"{            dropTarget: false,            drop(event) {                event.preventDefault();                const unitId = event.dataTransfer.getData('text/plain');                const parentId = {{ $unit->parent_id ?? 'null' }};                $wire.updateParent(unitId, parentId);                this.dropTarget = false;            },            dragOver(event) {                event.preventDefault();                this.dropTarget = true;            },            dragLeave() {                this.dropTarget = false;            },        }\" @drop=\"drop\" @dragover=\"dragOver\" @dragleave=\"dragLeave\"            class=\"h-2 w-full ml-4 border-b-2 border-transparent transition-colors duration-200\"            :class=\"{ 'border-blue-500': dropTarget }\"></div>        @if ($unit->children->count())            <ul class=\"mt-2 ml-4\">                @include('partials.organization-unit-tree', ['units' => $unit->children])            </ul>        @endif    </li>@endforeach"
        },
        {
            "type": "View",
            "name": "user-unit-tree.blade.php",
            "file": "./resources/views/partials/user-unit-tree.blade.php",
            "content": "<ul class=\"space-y-4\">    @foreach ($units as $unit)        <li wire:key=\"unit-{{ $unit->id }}\" x-data=\"{ open: true }\" class=\"relative pl-6\">            <div x-data=\"{ dragging: false }\" @dragover.prevent.stop=\"dragging = true\"                @dragleave.prevent.stop=\"dragging = false\"                @drop.prevent.stop=\"                    dragging = false;                    const userId = event.dataTransfer.getData('text/plain');                    if (userId) {                        $wire.assignUserToUnit(userId, {{ $unit->id }});                    }                \"                class=\"relative flex items-center justify-between rounded-lg p-4 bg-gray-50 border-2 border-transparent transition-all duration-200 text-sm\"                :class=\"{ 'border-dashed border-blue-500 bg-blue-50': dragging, 'cursor-pointer': true }\">                <div class=\"flex items-center\" @click=\"open = !open\">                    @if ($unit->children->count() > 0)                        <span class=\"text-gray-500 text-xl mr-2 transform transition-transform duration-200\"                            :class=\"{ 'rotate-90': open }\">▶</span>                    @else                        <span class=\"w-6 h-6 mr-2\"></span>                    @endif                    <span class=\"font-semibold text-gray-800\">{{ $unit->name }}</span>                </div>            </div>            <ul x-show=\"open\" x-collapse.duration.400ms class=\"mt-4 space-y-4\">                @if ($unit->users->count() > 0)                    @foreach ($unit->users as $user)                        <li wire:key=\"user-{{ $user->id }}\"                            class=\"pl-8 text-gray-600 bg-gray-200 rounded-md p-2 mb-2 cursor-grab text-sm transition-colors duration-200 hover:bg-gray-300\"                            draggable=\"true\"                            @dragstart.self=\"event.dataTransfer.setData('text/plain', {{ $user->id }});\">                            <span class=\"mr-2\">👤</span>{{ $user->name }}                        </li>                    @endforeach                @endif                @include('partials.user-unit-tree', ['units' => $unit->children])            </ul>        </li>    @endforeach</ul>"
        },
        {
            "type": "View",
            "name": "accounts-table.blade.php",
            "file": "./resources/views/partials/accounts-table.blade.php",
            "content": "<div class=\"overflow-x-auto shadow-md rounded-xl\">    <table class=\"min-w-full divide-y divide-gray-200\">        <thead class=\"bg-gray-50\">            <tr>                <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">                    Account Name</th>                <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">                    Account Type</th>                <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">                    Balance</th>                <th scope=\"col\" class=\"relative px-6 py-3\"><span class=\"sr-only\">Edit</span></th>            </tr>        </thead>        <tbody class=\"bg-white divide-y divide-gray-200\">{{-- Loop through accounts here --}}@forelse([] as $account)                <tr>                    <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">{{ $account->name }}</td>                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{{ $account->type }}</td>                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">$0.00</td>                    <td class=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\"><a href=\"#\"                            class=\"text-indigo-600 hover:text-indigo-900\">Edit</a></td>                </tr>@empty<tr>                        <td colspan=\"4\" class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center\">No accounts                            found.</td>                    </tr>                @endforelse            </tbody>        </table>    </div>"
        },
        {
            "type": "View",
            "name": "trial-bakance.blade.php",
            "file": "./resources/views/partials/trial-bakance.blade.php",
            "content": "<div class=\"p-4\">    <h3 class=\"text-xl font-semibold text-gray-900 mb-4\">Trial Balance Report</h3>    <p class=\"text-gray-600\">This report lists the ending balances in all of the company's general ledger accounts.        Debits and credits must be equal.</p>{{-- Trial balance table will go here --}}    <div class=\"overflow-x-auto rounded-xl border border-gray-200 dark:border-gray-700\">        <table class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">            <thead class=\"bg-gray-50 dark:bg-gray-700\">                <tr>                    <th scope=\"col\"                        class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">                        Account</th>                    <th scope=\"col\"                        class=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">                        Debit</th>                    <th scope=\"col\"                        class=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">                        Credit</th>                </tr>            </thead>            <tbody class=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">@php$totalDebit = 0;$totalCredit = 0;@endphp                @foreach ($data as $row)                    @php$totalDebit += $row['debit'];$totalCredit += $row['credit'];@endphp<tr>                        <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100\">                            {{ row['account'] }}</td>                        <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 text-right\">                            {{ number_format(row['debit'], 2) }}</td>                        <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 text-right\">                            {{ number_format(row['credit'], 2) }}</td>                    </tr>                @endforeach\\<tr                    class=\"bg-gray-100 dark:bg-gray-700 font-bold text-gray-900 dark:text-gray-100\">                    <td class=\"px-6 py-4 whitespace-nowrap text-sm uppercase\">Total</td>                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-right\">{{ number_format(totalDebit, 2) }}</td>                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-right\">{{ number_format($totalCredit, 2) }}</td>                </tr>            </tbody>        </table>    </div></div>"
        },
        {
            "type": "View",
            "name": "index.blade.php",
            "file": "./resources/views/accounts/index.blade.php",
            "content": "<x-layout>{{-- Header Section --}}<div class=\"bg-gradient-to-r from-gray-50 to-gray-100 py-8 shadow-sm\">        <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex justify-between items-center\">            <h1 class=\"text-3xl font-extrabold text-gray-800 tracking-tight\">🏭 Accounts Management</h1>            {{-- Tab Navigation for Alpine.js to switch between Livewire components --}}<nav class=\"flex space-x-4\"><a href=\"#\" @click.prevent=\"activeTab = 'dashboard'\"                    :class=\"{ 'bg-gray-200 text-gray-800': activeTab === 'dashboard' }\"class=\"px-3 py-2 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100 transition duration-150 ease-in-out\">Dashboard</a><a                    href=\"#\" @click.prevent=\"activeTab = 'accounts'\"                    :class=\"{ 'bg-gray-200 text-gray-800': activeTab === 'accounts' }\"class=\"px-3 py-2 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100 transition duration-150 ease-in-out\">Chart                    of Accounts</a><a href=\"#\" @click.prevent=\"activeTab = 'journal-entries'\"                    :class=\"{ 'bg-gray-200 text-gray-800': activeTab === 'journal-entries' }\"class=\"px-3 py-2 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100 transition duration-150 ease-in-out\">Journal                    Entries</a><a href=\"#\" @click.prevent=\"activeTab = 'reports'\"                    :class=\"{ 'bg-gray-200 text-gray-800': activeTab === 'reports' }\"class=\"px-3 py-2 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100 transition duration-150 ease-in-out\">Financial                    Reports</a></nav>        </div>    </div>{{-- Main Content Area --}}    <div class=\"bg-gray-50 min-h-screen py-10\">        <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">            <div x-data=\"{ activeTab: 'dashboard' }\" class=\"p-4 bg-white shadow-lg rounded-xl overflow-hidden mb-8\">                {{-- Tab Navigation --}}                <div class=\"border-b border-gray-200\">                    <nav class=\"-mb-px flex space-x-8\" aria-label=\"Tabs\">                        <button type=\"button\" @click=\"activeTab = 'dashboard'\"                            :class=\"{ 'border-indigo-500 text-indigo-600': activeTab === 'dashboard', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'dashboard' }\"                            class=\"whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm\">                            Dashboard                        </button>                        <button type=\"button\" @click=\"activeTab = 'accounts'\"                            :class=\"{ 'border-indigo-500 text-indigo-600': activeTab === 'accounts', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'accounts' }\"                            class=\"whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm\">                            Chart of Accounts                        </button>                        <button type=\"button\" @click=\"activeTab = 'journal-entries'\"                            :class=\"{ 'border-indigo-500 text-indigo-600': activeTab === 'journal-entries', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'journal-entries' }\"                            class=\"whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm\">                            Journal Entries                        </button>                        <button type=\"button\" @click=\"activeTab = 'reports'\"                            :class=\"{ 'border-indigo-500 text-indigo-600': activeTab === 'reports', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'reports' }\"                            class=\"whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm\">                            Financial Reports                        </button>                    </nav>                </div>                {{-- @livewire('api-data-fetcher') --}}                {{-- Tab Content --}}                <div class=\"mt-8 p-4 bg-white shadow-lg rounded-xl overflow-hidden\">                    <div x-show=\"activeTab === 'dashboard'\">                        @livewire('accounting.dashboard')                    </div>                    <div x-show=\"activeTab === 'accounts'\">                        @livewire('accounting.accounts')                    </div>                    <div x-show=\"activeTab === 'journal-entries'\">                        @livewire('accounting.journal-entries')                    </div>                    <div x-show=\"activeTab === 'reports'\">                        @livewire('accounting.reports')                    </div>                </div>            </div>        </div>    </div></x-layout>"
        },
        {
            "type": "View",
            "name": "welcome.blade.php",
            "file": "./resources/views/welcome.blade.php",
            "content": "<!DOCTYPE html><html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">    <head>        <meta charset=\"utf-8\">        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">        <title>Laravel</title>        <!-- Fonts -->        <link rel=\"preconnect\" href=\"https://fonts.bunny.net\">        <link href=\"https://fonts.bunny.net/css?family=instrument-sans:400,500,600\" rel=\"stylesheet\" />        <!-- Styles / Scripts -->        @if (file_exists(public_path('build/manifest.json')) || file_exists(public_path('hot')))            @vite(['resources/css/app.css', 'resources/js/app.js'])        @else            <style>                /*! tailwindcss v4.0.7 | MIT License | https://tailwindcss.com */@layer theme{:root,:host{--font-sans:'Instrument Sans',ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--font-serif:ui-serif,Georgia,Cambria,\"Times New Roman\",Times,serif;--font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--color-red-50:oklch(.971 .013 17.38);--color-red-100:oklch(.936 .032 17.717);--color-red-200:oklch(.885 .062 18.334);--color-red-300:oklch(.808 .114 19.571);--color-red-400:oklch(.704 .191 22.216);--color-red-500:oklch(.637 .237 25.331);--color-red-600:oklch(.577 .245 27.325);--color-red-700:oklch(.505 .213 27.518);--color-red-800:oklch(.444 .177 26.899);--color-red-900:oklch(.396 .141 25.723);--color-red-950:oklch(.258 .092 26.042);--color-orange-50:oklch(.98 .016 73.684);--color-orange-100:oklch(.954 .038 75.164);--color-orange-200:oklch(.901 .076 70.697);--color-orange-300:oklch(.837 .128 66.29);--color-orange-400:oklch(.75 .183 55.934);--color-orange-500:oklch(.705 .213 47.604);--color-orange-600:oklch(.646 .222 41.116);--color-orange-700:oklch(.553 .195 38.402);--color-orange-800:oklch(.47 .157 37.304);--color-orange-900:oklch(.408 .123 38.172);--color-orange-950:oklch(.266 .079 36.259);--color-amber-50:oklch(.987 .022 95.277);--color-amber-100:oklch(.962 .059 95.617);--color-amber-200:oklch(.924 .12 95.746);--color-amber-300:oklch(.879 .169 91.605);--color-amber-400:oklch(.828 .189 84.429);--color-amber-500:oklch(.769 .188 70.08);--color-amber-600:oklch(.666 .179 58.318);--color-amber-700:oklch(.555 .163 48.998);--color-amber-800:oklch(.473 .137 46.201);--color-amber-900:oklch(.414 .112 45.904);--color-amber-950:oklch(.279 .077 45.635);--color-yellow-50:oklch(.987 .026 102.212);--color-yellow-100:oklch(.973 .071 103.193);--color-yellow-200:oklch(.945 .129 101.54);--color-yellow-300:oklch(.905 .182 98.111);--color-yellow-400:oklch(.852 .199 91.936);--color-yellow-500:oklch(.795 .184 86.047);--color-yellow-600:oklch(.681 .162 75.834);--color-yellow-700:oklch(.554 .135 66.442);--color-yellow-800:oklch(.476 .114 61.907);--color-yellow-900:oklch(.421 .095 57.708);--color-yellow-950:oklch(.286 .066 53.813);--color-lime-50:oklch(.986 .031 120.757);--color-lime-100:oklch(.967 .067 122.328);--color-lime-200:oklch(.938 .127 124.321);--color-lime-300:oklch(.897 .196 126.665);--color-lime-400:oklch(.841 .238 128.85);--color-lime-500:oklch(.768 .233 130.85);--color-lime-600:oklch(.648 .2 131.684);--color-lime-700:oklch(.532 .157 131.589);--color-lime-800:oklch(.453 .124 130.933);--color-lime-900:oklch(.405 .101 131.063);--color-lime-950:oklch(.274 .072 132.109);--color-green-50:oklch(.982 .018 155.826);--color-green-100:oklch(.962 .044 156.743);--color-green-200:oklch(.925 .084 155.995);--color-green-300:oklch(.871 .15 154.449);--color-green-400:oklch(.792 .209 151.711);--color-green-500:oklch(.723 .219 149.579);--color-green-600:oklch(.627 .194 149.214);--color-green-700:oklch(.527 .154 150.069);--color-green-800:oklch(.448 .119 151.328);--color-green-900:oklch(.393 .095 152.535);--color-green-950:oklch(.266 .065 152.934);--color-emerald-50:oklch(.979 .021 166.113);--color-emerald-100:oklch(.95 .052 163.051);--color-emerald-200:oklch(.905 .093 164.15);--color-emerald-300:oklch(.845 .143 164.978);--color-emerald-400:oklch(.765 .177 163.223);--color-emerald-500:oklch(.696 .17 162.48);--color-emerald-600:oklch(.596 .145 163.225);--color-emerald-700:oklch(.508 .118 165.612);--color-emerald-800:oklch(.432 .095 166.913);--color-emerald-900:oklch(.378 .077 168.94);--color-emerald-950:oklch(.262 .051 172.552);--color-teal-50:oklch(.984 .014 180.72);--color-teal-100:oklch(.953 .051 180.801);--color-teal-200:oklch(.91 .096 180.426);--color-teal-300:oklch(.855 .138 181.071);--color-teal-400:oklch(.777 .152 181.912);--color-teal-500:oklch(.704 .14 182.503);--color-teal-600:oklch(.6 .118 184.704);--color-teal-700:oklch(.511 .096 186.391);--color-teal-800:oklch(.437 .078 188.216);--color-teal-900:oklch(.386 .063 188.416);--color-teal-950:oklch(.277 .046 192.524);--color-cyan-50:oklch(.984 .019 200.873);--color-cyan-100:oklch(.956 .045 203.388);--color-cyan-200:oklch(.917 .08 205.041);--color-cyan-300:oklch(.865 .127 207.078);--color-cyan-400:oklch(.789 .154 211.53);--color-cy"
        },
        {
            "type": "Config",
            "name": "auth",
            "file": "./config/auth.php",
            "content": "<?phpreturn [    /*    |--------------------------------------------------------------------------    | Authentication Defaults    |--------------------------------------------------------------------------    |    | This option defines the default authentication \"guard\" and password    | reset \"broker\" for your application. You may change these values    | as required, but they're a perfect start for most applications.    |    */    'defaults' => [        'guard' => env('AUTH_GUARD', 'web'),        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),    ],    /*    |--------------------------------------------------------------------------    | Authentication Guards    |--------------------------------------------------------------------------    |    | Next, you may define every authentication guard for your application.    | Of course, a great default configuration has been defined for you    | which utilizes session storage plus the Eloquent user provider.    |    | All authentication guards have a user provider, which defines how the    | users are actually retrieved out of your database or other storage    | system used by the application. Typically, Eloquent is utilized.    |    | Supported: \"session\"    |    */    'guards' => [        'web' => [            'driver' => 'session',            'provider' => 'users',        ],    ],    /*    |--------------------------------------------------------------------------    | User Providers    |--------------------------------------------------------------------------    |    | All authentication guards have a user provider, which defines how the    | users are actually retrieved out of your database or other storage    | system used by the application. Typically, Eloquent is utilized.    |    | If you have multiple user tables or models you may configure multiple    | providers to represent the model / table. These providers may then    | be assigned to any extra authentication guards you have defined.    |    | Supported: \"database\", \"eloquent\"    |    */    'providers' => [        'users' => [            'driver' => 'eloquent',            'model' => env('AUTH_MODEL', App\\Models\\User::class),        ],        // 'users' => [        //     'driver' => 'database',        //     'table' => 'users',        // ],    ],    /*    |--------------------------------------------------------------------------    | Resetting Passwords    |--------------------------------------------------------------------------    |    | These configuration options specify the behavior of Laravel's password    | reset functionality, including the table utilized for token storage    | and the user provider that is invoked to actually retrieve users.    |    | The expiry time is the number of minutes that each reset token will be    | considered valid. This security feature keeps tokens short-lived so    | they have less time to be guessed. You"
        },
        {
            "type": "Config",
            "name": "cache",
            "file": "./config/cache.php",
            "content": "<?phpuse Illuminate\\Support\\Str;return [    /*    |--------------------------------------------------------------------------    | Default Cache Store    |--------------------------------------------------------------------------    |    | This option controls the default cache store that will be used by the    | framework. This connection is utilized if another isn't explicitly    | specified when running a cache operation inside the application.    |    */    'default' => env('CACHE_STORE', 'database'),    /*    |--------------------------------------------------------------------------    | Cache Stores    |--------------------------------------------------------------------------    |    | Here you may define all of the cache \"stores\" for your application as    | well as their drivers. You may even define multiple stores for the    | same cache driver to group types of items stored in your caches.    |    | Supported drivers: \"array\", \"database\", \"file\", \"memcached\",    |                    \"redis\", \"dynamodb\", \"octane\", \"null\"    |    */    'stores' => [        'array' => [            'driver' => 'array',            'serialize' => false,        ],        'database' => [            'driver' => 'database',            'connection' => env('DB_CACHE_CONNECTION'),            'table' => env('DB_CACHE_TABLE', 'cache'),            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),            'lock_table' => env('DB_CACHE_LOCK_TABLE'),        ],        'file' => [            'driver' => 'file',            'path' => storage_path('framework/cache/data'),            'lock_path' => storage_path('framework/cache/data'),        ],        'memcached' => [            'driver' => 'memcached',            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),            'sasl' => [                env('MEMCACHED_USERNAME'),                env('MEMCACHED_PASSWORD'),            ],            'options' => [                // Memcached::OPT_CONNECT_TIMEOUT => 2000,            ],            'servers' => [                [                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),                    'port' => env('MEMCACHED_PORT', 11211),                    'weight' => 100,                ],            ],        ],        'redis' => [            'driver' => 'redis',            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),        ],        'dynamodb' => [            'driver' => 'dynamodb',            'key' => env('AWS_ACCESS_KEY_ID'),            'secret' => env('AWS_SECRET_ACCESS_KEY'),            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),            'endpoint' => env('DYNAMODB_ENDPOINT'),        ],        'octane' => [            'driver' => 'octane',        ],    ],    /*    |---------------------------------------"
        },
        {
            "type": "Config",
            "name": "database",
            "file": "./config/database.php",
            "content": "<?phpuse Illuminate\\Support\\Str;return [    /*    |--------------------------------------------------------------------------    | Default Database Connection Name    |--------------------------------------------------------------------------    |    | Here you may specify which of the database connections below you wish    | to use as your default connection for database operations. This is    | the connection which will be utilized unless another connection    | is explicitly specified when you execute a query / statement.    |    */    'default' => env('DB_CONNECTION', 'sqlite'),    /*    |--------------------------------------------------------------------------    | Database Connections    |--------------------------------------------------------------------------    |    | Below are all of the database connections defined for your application.    | An example configuration is provided for each database system which    | is supported by Laravel. You're free to add / remove connections.    |    */    'connections' => [        'sqlite' => [            'driver' => 'sqlite',            'url' => env('DB_URL'),            'database' => env('DB_DATABASE', database_path('database.sqlite')),            'prefix' => '',            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),            'busy_timeout' => null,            'journal_mode' => null,            'synchronous' => null,        ],        'mysql' => [            'driver' => 'mysql',            'url' => env('DB_URL'),            'host' => env('DB_HOST', '127.0.0.1'),            'port' => env('DB_PORT', '3306'),            'database' => env('DB_DATABASE', 'laravel'),            'username' => env('DB_USERNAME', 'root'),            'password' => env('DB_PASSWORD', ''),            'unix_socket' => env('DB_SOCKET', ''),            'charset' => env('DB_CHARSET', 'utf8mb4'),            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),            'prefix' => '',            'prefix_indexes' => true,            'strict' => true,            'engine' => null,            'options' => extension_loaded('pdo_mysql') ? array_filter([                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),            ]) : [],        ],        'mariadb' => [            'driver' => 'mariadb',            'url' => env('DB_URL'),            'host' => env('DB_HOST', '127.0.0.1'),            'port' => env('DB_PORT', '3306'),            'database' => env('DB_DATABASE', 'laravel'),            'username' => env('DB_USERNAME', 'root'),            'password' => env('DB_PASSWORD', ''),            'unix_socket' => env('DB_SOCKET', ''),            'charset' => env('DB_CHARSET', 'utf8mb4'),            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),            'prefix' => '',            'prefix_indexes' => true,            'strict' => true,            'engine' => null,            'options' => extension_loaded('pdo_mysql') ? array"
        },
        {
            "type": "Config",
            "name": "filesystems",
            "file": "./config/filesystems.php",
            "content": "<?phpreturn [    /*    |--------------------------------------------------------------------------    | Default Filesystem Disk    |--------------------------------------------------------------------------    |    | Here you may specify the default filesystem disk that should be used    | by the framework. The \"local\" disk, as well as a variety of cloud    | based disks are available to your application for file storage.    |    */    'default' => env('FILESYSTEM_DISK', 'local'),    /*    |--------------------------------------------------------------------------    | Filesystem Disks    |--------------------------------------------------------------------------    |    | Below you may configure as many filesystem disks as necessary, and you    | may even configure multiple disks for the same driver. Examples for    | most supported storage drivers are configured here for reference.    |    | Supported drivers: \"local\", \"ftp\", \"sftp\", \"s3\"    |    */    'disks' => [        'local' => [            'driver' => 'local',            'root' => storage_path('app/private'),            'serve' => true,            'throw' => false,            'report' => false,        ],        'public' => [            'driver' => 'local',            'root' => storage_path('app/public'),            'url' => env('APP_URL').'/storage',            'visibility' => 'public',            'throw' => false,            'report' => false,        ],        's3' => [            'driver' => 's3',            'key' => env('AWS_ACCESS_KEY_ID'),            'secret' => env('AWS_SECRET_ACCESS_KEY'),            'region' => env('AWS_DEFAULT_REGION'),            'bucket' => env('AWS_BUCKET'),            'url' => env('AWS_URL'),            'endpoint' => env('AWS_ENDPOINT'),            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),            'throw' => false,            'report' => false,        ],    ],    /*    |--------------------------------------------------------------------------    | Symbolic Links    |--------------------------------------------------------------------------    |    | Here you may configure the symbolic links that will be created when the    | `storage:link` Artisan command is executed. The array keys should be    | the locations of the links and the values should be their targets.    |    */    'links' => [        public_path('storage') => storage_path('app/public'),    ],];"
        },
        {
            "type": "Config",
            "name": "logging",
            "file": "./config/logging.php",
            "content": "<?phpuse Monolog\\Handler\\NullHandler;use Monolog\\Handler\\StreamHandler;use Monolog\\Handler\\SyslogUdpHandler;use Monolog\\Processor\\PsrLogMessageProcessor;return [    /*    |--------------------------------------------------------------------------    | Default Log Channel    |--------------------------------------------------------------------------    |    | This option defines the default log channel that is utilized to write    | messages to your logs. The value provided here should match one of    | the channels present in the list of \"channels\" configured below.    |    */    'default' => env('LOG_CHANNEL', 'stack'),    /*    |--------------------------------------------------------------------------    | Deprecations Log Channel    |--------------------------------------------------------------------------    |    | This option controls the log channel that should be used to log warnings    | regarding deprecated PHP and library features. This allows you to get    | your application ready for upcoming major versions of dependencies.    |    */    'deprecations' => [        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),        'trace' => env('LOG_DEPRECATIONS_TRACE', false),    ],    /*    |--------------------------------------------------------------------------    | Log Channels    |--------------------------------------------------------------------------    |    | Here you may configure the log channels for your application. Laravel    | utilizes the Monolog PHP logging library, which includes a variety    | of powerful log handlers and formatters that you're free to use.    |    | Available drivers: \"single\", \"daily\", \"slack\", \"syslog\",    |                    \"errorlog\", \"monolog\", \"custom\", \"stack\"    |    */    'channels' => [        'stack' => [            'driver' => 'stack',            'channels' => explode(',', env('LOG_STACK', 'single')),            'ignore_exceptions' => false,        ],        'single' => [            'driver' => 'single',            'path' => storage_path('logs/laravel.log'),            'level' => env('LOG_LEVEL', 'debug'),            'replace_placeholders' => true,        ],        'daily' => [            'driver' => 'daily',            'path' => storage_path('logs/laravel.log'),            'level' => env('LOG_LEVEL', 'debug'),            'days' => env('LOG_DAILY_DAYS', 14),            'replace_placeholders' => true,        ],        'slack' => [            'driver' => 'slack',            'url' => env('LOG_SLACK_WEBHOOK_URL'),            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),            'level' => env('LOG_LEVEL', 'critical'),            'replace_placeholders' => true,        ],        'papertrail' => [            'driver' => 'monolog',            'level' => env('LOG_LEVEL', 'debug'),            'handler' => env('LOG_PAPERTRAIL_HANDLER', Syslog"
        },
        {
            "type": "Config",
            "name": "mail",
            "file": "./config/mail.php",
            "content": "<?phpreturn [    /*    |--------------------------------------------------------------------------    | Default Mailer    |--------------------------------------------------------------------------    |    | This option controls the default mailer that is used to send all email    | messages unless another mailer is explicitly specified when sending    | the message. All additional mailers can be configured within the    | \"mailers\" array. Examples of each type of mailer are provided.    |    */    'default' => env('MAIL_MAILER', 'log'),    /*    |--------------------------------------------------------------------------    | Mailer Configurations    |--------------------------------------------------------------------------    |    | Here you may configure all of the mailers used by your application plus    | their respective settings. Several examples have been configured for    | you and you are free to add your own as your application requires.    |    | Laravel supports a variety of mail \"transport\" drivers that can be used    | when delivering an email. You may specify which one you're using for    | your mailers below. You may also add additional mailers if needed.    |    | Supported: \"smtp\", \"sendmail\", \"mailgun\", \"ses\", \"ses-v2\",    |            \"postmark\", \"resend\", \"log\", \"array\",    |            \"failover\", \"roundrobin\"    |    */    'mailers' => [        'smtp' => [            'transport' => 'smtp',            'scheme' => env('MAIL_SCHEME'),            'url' => env('MAIL_URL'),            'host' => env('MAIL_HOST', '127.0.0.1'),            'port' => env('MAIL_PORT', 2525),            'username' => env('MAIL_USERNAME'),            'password' => env('MAIL_PASSWORD'),            'timeout' => null,            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url(env('APP_URL', 'http://localhost'), PHP_URL_HOST)),        ],        'ses' => [            'transport' => 'ses',        ],        'postmark' => [            'transport' => 'postmark',            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),            // 'client' => [            //     'timeout' => 5,            // ],        ],        'resend' => [            'transport' => 'resend',        ],        'sendmail' => [            'transport' => 'sendmail',            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),        ],        'log' => [            'transport' => 'log',            'channel' => env('MAIL_LOG_CHANNEL'),        ],        'array' => [            'transport' => 'array',        ],        'failover' => [            'transport' => 'failover',            'mailers' => [                'smtp',                'log',            ],            'retry_after' => 60,        ],        'roundrobin' => [            'transport' => 'roundrobin',            'mailers' => [                'ses',                'postmark',            ],            'retry_after' ="
        },
        {
            "type": "Config",
            "name": "queue",
            "file": "./config/queue.php",
            "content": "<?phpreturn [    /*    |--------------------------------------------------------------------------    | Default Queue Connection Name    |--------------------------------------------------------------------------    |    | Laravel's queue supports a variety of backends via a single, unified    | API, giving you convenient access to each backend using identical    | syntax for each. The default queue connection is defined below.    |    */    'default' => env('QUEUE_CONNECTION', 'database'),    /*    |--------------------------------------------------------------------------    | Queue Connections    |--------------------------------------------------------------------------    |    | Here you may configure the connection options for every queue backend    | used by your application. An example configuration is provided for    | each backend supported by Laravel. You're also free to add more.    |    | Drivers: \"sync\", \"database\", \"beanstalkd\", \"sqs\", \"redis\", \"null\"    |    */    'connections' => [        'sync' => [            'driver' => 'sync',        ],        'database' => [            'driver' => 'database',            'connection' => env('DB_QUEUE_CONNECTION'),            'table' => env('DB_QUEUE_TABLE', 'jobs'),            'queue' => env('DB_QUEUE', 'default'),            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),            'after_commit' => false,        ],        'beanstalkd' => [            'driver' => 'beanstalkd',            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),            'queue' => env('BEANSTALKD_QUEUE', 'default'),            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),            'block_for' => 0,            'after_commit' => false,        ],        'sqs' => [            'driver' => 'sqs',            'key' => env('AWS_ACCESS_KEY_ID'),            'secret' => env('AWS_SECRET_ACCESS_KEY'),            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),            'queue' => env('SQS_QUEUE', 'default'),            'suffix' => env('SQS_SUFFIX'),            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),            'after_commit' => false,        ],        'redis' => [            'driver' => 'redis',            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),            'queue' => env('REDIS_QUEUE', 'default'),            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),            'block_for' => null,            'after_commit' => false,        ],    ],    /*    |--------------------------------------------------------------------------    | Job Batching    |--------------------------------------------------------------------------    |    | The following options configure the database and table that store job    | batching information. These options can be updated to any database    | connection and table which has been defined by your application.  "
        },
        {
            "type": "Config",
            "name": "services",
            "file": "./config/services.php",
            "content": "<?phpreturn [    /*    |--------------------------------------------------------------------------    | Third Party Services    |--------------------------------------------------------------------------    |    | This file is for storing the credentials for third party services such    | as Mailgun, Postmark, AWS and more. This file provides the de facto    | location for this type of information, allowing packages to have    | a conventional file to locate the various service credentials.    |    */    'postmark' => [        'token' => env('POSTMARK_TOKEN'),    ],    'resend' => [        'key' => env('RESEND_KEY'),    ],    'ses' => [        'key' => env('AWS_ACCESS_KEY_ID'),        'secret' => env('AWS_SECRET_ACCESS_KEY'),        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),    ],    'slack' => [        'notifications' => [            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),        ],    ],];"
        },
        {
            "type": "Config",
            "name": "session",
            "file": "./config/session.php",
            "content": "<?phpuse Illuminate\\Support\\Str;return [    /*    |--------------------------------------------------------------------------    | Default Session Driver    |--------------------------------------------------------------------------    |    | This option determines the default session driver that is utilized for    | incoming requests. Laravel supports a variety of storage options to    | persist session data. Database storage is a great default choice.    |    | Supported: \"file\", \"cookie\", \"database\", \"memcached\",    |            \"redis\", \"dynamodb\", \"array\"    |    */    'driver' => env('SESSION_DRIVER', 'database'),    /*    |--------------------------------------------------------------------------    | Session Lifetime    |--------------------------------------------------------------------------    |    | Here you may specify the number of minutes that you wish the session    | to be allowed to remain idle before it expires. If you want them    | to expire immediately when the browser is closed then you may    | indicate that via the expire_on_close configuration option.    |    */    'lifetime' => (int) env('SESSION_LIFETIME', 120),    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),    /*    |--------------------------------------------------------------------------    | Session Encryption    |--------------------------------------------------------------------------    |    | This option allows you to easily specify that all of your session data    | should be encrypted before it's stored. All encryption is performed    | automatically by Laravel and you may use the session like normal.    |    */    'encrypt' => env('SESSION_ENCRYPT', false),    /*    |--------------------------------------------------------------------------    | Session File Location    |--------------------------------------------------------------------------    |    | When utilizing the \"file\" session driver, the session files are placed    | on disk. The default storage location is defined here; however, you    | are free to provide another location where they should be stored.    |    */    'files' => storage_path('framework/sessions'),    /*    |--------------------------------------------------------------------------    | Session Database Connection    |--------------------------------------------------------------------------    |    | When using the \"database\" or \"redis\" session drivers, you may specify a    | connection that should be used to manage these sessions. This should    | correspond to a connection in your database configuration options.    |    */    'connection' => env('SESSION_CONNECTION'),    /*    |--------------------------------------------------------------------------    | Session Database Table    |--------------------------------------------------------------------------    |    | When using the \"database\" session driver, you may specify the ta"
        },
        {
            "type": "Config",
            "name": "jetstream",
            "file": "./config/jetstream.php",
            "content": "<?phpuse Laravel\\Jetstream\\Features;use Laravel\\Jetstream\\Http\\Middleware\\AuthenticateSession;return [    /*    |--------------------------------------------------------------------------    | Jetstream Stack    |--------------------------------------------------------------------------    |    | This configuration value informs Jetstream which \"stack\" you will be    | using for your application. In general, this value is set for you    | during installation and will not need to be changed after that.    |    */    'stack' => 'livewire',    /*    |--------------------------------------------------------------------------    | Jetstream Route Middleware    |--------------------------------------------------------------------------    |    | Here you may specify which middleware Jetstream will assign to the routes    | that it registers with the application. When necessary, you may modify    | these middleware; however, this default value is usually sufficient.    |    */    'middleware' => ['web'],    'auth_session' => AuthenticateSession::class,    /*    |--------------------------------------------------------------------------    | Jetstream Guard    |--------------------------------------------------------------------------    |    | Here you may specify the authentication guard Jetstream will use while    | authenticating users. This value should correspond with one of your    | guards that is already present in your \"auth\" configuration file.    |    */    'guard' => 'sanctum',    /*    |--------------------------------------------------------------------------    | Features    |--------------------------------------------------------------------------    |    | Some of Jetstream's features are optional. You may disable the features    | by removing them from this array. You're free to only remove some of    | these features or you can even remove all of these if you need to.    |    */    'features' => [        // Features::termsAndPrivacyPolicy(),        // Features::profilePhotos(),        Features::api(),        Features::teams(['invitations' => true]),        Features::accountDeletion(),    ],    /*    |--------------------------------------------------------------------------    | Profile Photo Disk    |--------------------------------------------------------------------------    |    | This configuration value determines the default disk that will be used    | when storing profile photos for your application's users. Typically    | this will be the \"public\" disk but you may adjust this if needed.    |    */    'profile_photo_disk' => 'public',];"
        },
        {
            "type": "Config",
            "name": "fortify",
            "file": "./config/fortify.php",
            "content": "<?phpuse Laravel\\Fortify\\Features;return [    /*    |--------------------------------------------------------------------------    | Fortify Guard    |--------------------------------------------------------------------------    |    | Here you may specify which authentication guard Fortify will use while    | authenticating users. This value should correspond with one of your    | guards that is already present in your \"auth\" configuration file.    |    */    'guard' => 'web',    /*    |--------------------------------------------------------------------------    | Fortify Password Broker    |--------------------------------------------------------------------------    |    | Here you may specify which password broker Fortify can use when a user    | is resetting their password. This configured value should match one    | of your password brokers setup in your \"auth\" configuration file.    |    */    'passwords' => 'users',    /*    |--------------------------------------------------------------------------    | Username / Email    |--------------------------------------------------------------------------    |    | This value defines which model attribute should be considered as your    | application's \"username\" field. Typically, this might be the email    | address of the users but you are free to change this value here.    |    | Out of the box, Fortify expects forgot password and reset password    | requests to have a field named 'email'. If the application uses    | another name for the field you may define it below as needed.    |    */    'username' => 'email',    'email' => 'email',    /*    |--------------------------------------------------------------------------    | Lowercase Usernames    |--------------------------------------------------------------------------    |    | This value defines whether usernames should be lowercased before saving    | them in the database, as some database system string fields are case    | sensitive. You may disable this for your application if necessary.    |    */    'lowercase_usernames' => true,    /*    |--------------------------------------------------------------------------    | Home Path    |--------------------------------------------------------------------------    |    | Here you may configure the path where users will get redirected during    | authentication or password reset when the operations are successful    | and the user is authenticated. You are free to change this value.    |    */    'home' => '/dashboard',    /*    |--------------------------------------------------------------------------    | Fortify Routes Prefix / Subdomain    |--------------------------------------------------------------------------    |    | Here you may specify which prefix Fortify will assign to all the routes    | that it registers with the application. If necessary, you may change    | subdomain under which all of"
        },
        {
            "type": "Config",
            "name": "sanctum",
            "file": "./config/sanctum.php",
            "content": "<?phpuse Laravel\\Sanctum\\Sanctum;return [    /*    |--------------------------------------------------------------------------    | Stateful Domains    |--------------------------------------------------------------------------    |    | Requests from the following domains / hosts will receive stateful API    | authentication cookies. Typically, these should include your local    | and production domains which access your API via a frontend SPA.    |    */    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(        '%s%s',        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',        Sanctum::currentApplicationUrlWithPort(),        // Sanctum::currentRequestHost(),    ))),    /*    |--------------------------------------------------------------------------    | Sanctum Guards    |--------------------------------------------------------------------------    |    | This array contains the authentication guards that will be checked when    | Sanctum is trying to authenticate a request. If none of these guards    | are able to authenticate the request, Sanctum will use the bearer    | token that's present on an incoming request for authentication.    |    */    'guard' => ['web'],    /*    |--------------------------------------------------------------------------    | Expiration Minutes    |--------------------------------------------------------------------------    |    | This value controls the number of minutes until an issued token will be    | considered expired. This will override any values set in the token's    | \"expires_at\" attribute, but first-party sessions are not affected.    |    */    'expiration' => null,    /*    |--------------------------------------------------------------------------    | Token Prefix    |--------------------------------------------------------------------------    |    | Sanctum can prefix new tokens in order to take advantage of numerous    | security scanning initiatives maintained by open source platforms    | that notify developers if they commit tokens into repositories.    |    | See: https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning    |    */    'token_prefix' => env('SANCTUM_TOKEN_PREFIX', ''),    /*    |--------------------------------------------------------------------------    | Sanctum Middleware    |--------------------------------------------------------------------------    |    | When authenticating your first-party SPA with Sanctum you may need to    | customize some of the middleware Sanctum uses while processing the    | request. You may change the middleware listed below as required.    |    */    'middleware' => [        'authenticate_session' => Laravel\\Sanctum\\Http\\Middleware\\AuthenticateSession::class,        'encrypt_cookies' => Illuminate\\Cookie\\Middleware\\EncryptCookies::class,        'validate_csrf_token' => Illuminate\\Foundation\\Http\\Middleware\\"
        },
        {
            "type": "Config",
            "name": "blade-heroicons",
            "file": "./config/blade-heroicons.php",
            "content": "<?phpreturn [    /*    |-----------------------------------------------------------------    | Default Prefix    |-----------------------------------------------------------------    |    | This config option allows you to define a default prefix for    | your icons. The dash separator will be applied automatically    | to every icon name. It's required and needs to be unique.    |    */    'prefix' => 'heroicon',    /*    |-----------------------------------------------------------------    | Fallback Icon    |-----------------------------------------------------------------    |    | This config option allows you to define a fallback    | icon when an icon in this set cannot be found.    |    */    'fallback' => '',    /*    |-----------------------------------------------------------------    | Default Set Classes    |-----------------------------------------------------------------    |    | This config option allows you to define some classes which    | will be applied by default to all icons within this set.    |    */    'class' => '',    /*    |-----------------------------------------------------------------    | Default Set Attributes    |-----------------------------------------------------------------    |    | This config option allows you to define some attributes which    | will be applied by default to all icons within this set.    |    */    'attributes' => [        // 'width' => 50,        // 'height' => 50,    ],];"
        },
        {
            "type": "Config",
            "name": "app",
            "file": "./config/app.php",
            "content": "<?phpreturn [    /*    |--------------------------------------------------------------------------    | Application Name    |--------------------------------------------------------------------------    |    | This value is the name of your application, which will be used when the    | framework needs to place the application's name in a notification or    | other UI elements where an application name needs to be displayed.    |    */    'name' => env('APP_NAME', 'Laravel'),    /*    |--------------------------------------------------------------------------    | Application Environment    |--------------------------------------------------------------------------    |    | This value determines the \"environment\" your application is currently    | running in. This may determine how you prefer to configure various    | services the application utilizes. Set this in your \".env\" file.    |    */    'env' => env('APP_ENV', 'production'),    /*    |--------------------------------------------------------------------------    | Application Debug Mode    |--------------------------------------------------------------------------    |    | When your application is in debug mode, detailed error messages with    | stack traces will be shown on every error that occurs within your    | application. If disabled, a simple generic error page is shown.    |    */    'debug' => (bool) env('APP_DEBUG', false),    /*    |--------------------------------------------------------------------------    | Application URL    |--------------------------------------------------------------------------    |    | This URL is used by the console to properly generate URLs when using    | the Artisan command line tool. You should set this to the root of    | the application so that it's available within Artisan commands.    |    */    'url' => env('APP_URL', 'http://localhost'),    /*    |--------------------------------------------------------------------------    | Application Timezone    |--------------------------------------------------------------------------    |    | Here you may specify the default timezone for your application, which    | will be used by the PHP date and date-time functions. The timezone    | is set to \"UTC\" by default as it is suitable for most use cases.    |    */    'timezone' => 'UTC',    /*    |--------------------------------------------------------------------------    | Application Locale Configuration    |--------------------------------------------------------------------------    |    | The application locale determines the default locale that will be used    | by Laravel's translation / localization methods. This option can be    | set to any locale for which you plan to have translation strings.    |    */    'locale' => env('APP_LOCALE', 'en'),    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),"
        }
    ]
}